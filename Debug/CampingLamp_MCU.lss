
CampingLamp_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000810  000008c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000810  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000154  0080010a  0080010a  000008ce  2**0
                  ALLOC
  3 .eeprom       00000028  00810000  00810000  000008ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000008f6  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000928  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000150  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000141f  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000873  00000000  00000000  00001ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006f0  00000000  00000000  0000274a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000314  00000000  00000000  00002e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000707  00000000  00000000  00003150  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000093f  00000000  00000000  00003857  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000100  00000000  00000000  00004196  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__vector_18>
  4c:	0c 94 86 03 	jmp	0x70c	; 0x70c <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	3f 02       	muls	r19, r31

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e0 e1       	ldi	r30, 0x10	; 16
  7e:	f8 e0       	ldi	r31, 0x08	; 8
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	aa 30       	cpi	r26, 0x0A	; 10
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	22 e0       	ldi	r18, 0x02	; 2
  8e:	aa e0       	ldi	r26, 0x0A	; 10
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	ae 35       	cpi	r26, 0x5E	; 94
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 ca 03 	call	0x794	; 0x794 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 c5 01 	call	0x38a	; 0x38a <main>
  b6:	0c 94 06 04 	jmp	0x80c	; 0x80c <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z13get_key_pressh>:
volatile uint8_t key_rpt;				// key long press and repeat


uint8_t get_key_press( uint8_t key_mask )
{
	cli();								// read and clear atomic !
  be:	f8 94       	cli
	key_mask &= key_press;              // read key(s)
  c0:	90 91 0c 01 	lds	r25, 0x010C
  c4:	89 23       	and	r24, r25
	key_press ^= key_mask;              // clear key(s)
  c6:	90 91 0c 01 	lds	r25, 0x010C
  ca:	98 27       	eor	r25, r24
  cc:	90 93 0c 01 	sts	0x010C, r25
	sei();
  d0:	78 94       	sei
	return key_mask;
}
  d2:	08 95       	ret

000000d4 <_Z11get_key_rpth>:

uint8_t get_key_rpt( uint8_t key_mask )
{
	cli();								// read and clear atomic !
  d4:	f8 94       	cli
	key_mask &= key_rpt;                // read key(s)
  d6:	90 91 0a 01 	lds	r25, 0x010A
  da:	89 23       	and	r24, r25
	key_rpt ^= key_mask;                // clear key(s)
  dc:	90 91 0a 01 	lds	r25, 0x010A
  e0:	98 27       	eor	r25, r24
  e2:	90 93 0a 01 	sts	0x010A, r25
	sei();
  e6:	78 94       	sei
	return key_mask;
}
  e8:	08 95       	ret

000000ea <_Z13get_key_shorth>:

uint8_t get_key_short( uint8_t key_mask )
{
	cli();			// read key state and key press atomic !
  ea:	f8 94       	cli
	return get_key_press( ~key_state & key_mask );
  ec:	90 91 0d 01 	lds	r25, 0x010D
  f0:	90 95       	com	r25
  f2:	89 23       	and	r24, r25
  f4:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z13get_key_pressh>
}
  f8:	08 95       	ret

000000fa <_Z15get_key_releaseh>:
	return get_key_press( get_key_rpt( key_mask ));
}

uint8_t get_key_release( uint8_t key_mask )
{
	cli();                     // read and clear atomic !
  fa:	f8 94       	cli
	key_mask &= key_release;   // read key(s)
  fc:	90 91 0b 01 	lds	r25, 0x010B
 100:	89 23       	and	r24, r25
	key_release ^= key_mask;   // clear key(s)
 102:	90 91 0b 01 	lds	r25, 0x010B
 106:	98 27       	eor	r25, r24
 108:	90 93 0b 01 	sts	0x010B, r25
	sei();
 10c:	78 94       	sei
	return key_mask;
}
 10e:	08 95       	ret

00000110 <_Z14get_key_long_rh>:

uint8_t get_key_long_r( uint8_t key_mask )      // if repeat functionality for long press needed
{
  return get_key_press( get_key_rpt( key_press & key_mask ));
 110:	90 91 0c 01 	lds	r25, 0x010C
 114:	89 23       	and	r24, r25
 116:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z11get_key_rpth>
 11a:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z13get_key_pressh>
}
 11e:	08 95       	ret

00000120 <_Z13get_key_rpt_lh>:

uint8_t get_key_rpt_l( uint8_t key_mask )       // if long press function with long press repeat functionality needed
{
  return get_key_rpt( ~key_press & key_mask );
 120:	90 91 0c 01 	lds	r25, 0x010C
 124:	90 95       	com	r25
 126:	89 23       	and	r24, r25
 128:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z11get_key_rpth>
}
 12c:	08 95       	ret

0000012e <__vector_16>:
int tmp;
int i;
int modus;

ISR(TIMER0_OVF_vect)		// every 10ms for debouncing the switch
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
	static uint8_t ct0, ct1, rpt;
	uint8_t i;

	TCNT0 = (uint8_t)(uint16_t)-(F_CPU / 1024 * 10e-3 + 0.5);	// preload for 10ms
 142:	16 bc       	out	0x26, r1	; 38

	i = key_state ^ ~(KEY_PIN & 0x08);		// key changed ?
 144:	29 b1       	in	r18, 0x09	; 9
 146:	90 91 0d 01 	lds	r25, 0x010D
 14a:	28 70       	andi	r18, 0x08	; 8
 14c:	20 95       	com	r18
 14e:	29 27       	eor	r18, r25
	ct0 = ~( ct0 & i );			// reset or count ct0
 150:	80 91 10 01 	lds	r24, 0x0110
 154:	82 23       	and	r24, r18
 156:	80 95       	com	r24
 158:	80 93 10 01 	sts	0x0110, r24
	ct1 = ct0 ^ (ct1 & i);		// reset or count ct1
 15c:	90 91 0f 01 	lds	r25, 0x010F
 160:	92 23       	and	r25, r18
 162:	98 27       	eor	r25, r24
 164:	90 93 0f 01 	sts	0x010F, r25
 168:	82 23       	and	r24, r18
	i &= ct0 & ct1;			// count until roll over ?
 16a:	89 23       	and	r24, r25
	key_state ^= i;			// then toggle debounced state
 16c:	90 91 0d 01 	lds	r25, 0x010D
 170:	98 27       	eor	r25, r24
 172:	90 93 0d 01 	sts	0x010D, r25
	key_press |= key_state & i;		// 0->1: key press detect
 176:	90 91 0d 01 	lds	r25, 0x010D
 17a:	20 91 0c 01 	lds	r18, 0x010C
 17e:	98 23       	and	r25, r24
 180:	92 2b       	or	r25, r18
 182:	90 93 0c 01 	sts	0x010C, r25
	key_release |= ~key_state & i; // 1->0: key release detect
 186:	20 91 0d 01 	lds	r18, 0x010D
 18a:	40 91 0b 01 	lds	r20, 0x010B
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	20 95       	com	r18
 194:	30 95       	com	r19
 196:	82 23       	and	r24, r18
 198:	93 23       	and	r25, r19
 19a:	84 2b       	or	r24, r20
 19c:	80 93 0b 01 	sts	0x010B, r24
	
	if( (key_state & REPEAT_MASK) == 0 )	// check repeat function
 1a0:	80 91 0d 01 	lds	r24, 0x010D
 1a4:	83 fd       	sbrc	r24, 3
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <__vector_16+0x82>
	rpt = REPEAT_START;		// start delay
	if( --rpt == 0 ){
 1a8:	81 e3       	ldi	r24, 0x31	; 49
 1aa:	80 93 0e 01 	sts	0x010E, r24
 1ae:	12 c0       	rjmp	.+36     	; 0x1d4 <__vector_16+0xa6>
 1b0:	80 91 0e 01 	lds	r24, 0x010E
 1b4:	81 50       	subi	r24, 0x01	; 1
 1b6:	19 f0       	breq	.+6      	; 0x1be <__vector_16+0x90>
 1b8:	80 93 0e 01 	sts	0x010E, r24
 1bc:	0b c0       	rjmp	.+22     	; 0x1d4 <__vector_16+0xa6>
		rpt = REPEAT_NEXT;			// repeat delay
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 0e 01 	sts	0x010E, r24
		key_rpt |= key_state & REPEAT_MASK;
 1c4:	80 91 0d 01 	lds	r24, 0x010D
 1c8:	90 91 0a 01 	lds	r25, 0x010A
 1cc:	88 70       	andi	r24, 0x08	; 8
 1ce:	89 2b       	or	r24, r25
 1d0:	80 93 0a 01 	sts	0x010A, r24
	}
}
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	4f 91       	pop	r20
 1da:	3f 91       	pop	r19
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <_Z16writeOutGSvaluesP8GSvalues>:

void writeOutGSvalues(GSvalues* GSvalue)
{
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	ec 01       	movw	r28, r24
	myChip.setGreyScale(3, GSvalue->coldW1, GSvalue->warmW1, 0x0);
 1f2:	2a 81       	ldd	r18, Y+2	; 0x02
 1f4:	3b 81       	ldd	r19, Y+3	; 0x03
 1f6:	48 81       	ld	r20, Y
 1f8:	59 81       	ldd	r21, Y+1	; 0x01
 1fa:	00 e0       	ldi	r16, 0x00	; 0
 1fc:	10 e0       	ldi	r17, 0x00	; 0
 1fe:	63 e0       	ldi	r22, 0x03	; 3
 200:	81 e2       	ldi	r24, 0x21	; 33
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN8TLC5971112setGreyScaleEhjjj>
	myChip.setGreyScale(2, GSvalue->coldW2, GSvalue->warmW2, 0x0);
 208:	2e 81       	ldd	r18, Y+6	; 0x06
 20a:	3f 81       	ldd	r19, Y+7	; 0x07
 20c:	4c 81       	ldd	r20, Y+4	; 0x04
 20e:	5d 81       	ldd	r21, Y+5	; 0x05
 210:	62 e0       	ldi	r22, 0x02	; 2
 212:	81 e2       	ldi	r24, 0x21	; 33
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN8TLC5971112setGreyScaleEhjjj>
}
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	08 95       	ret

00000224 <_Z11switch_CSeth>:
void switch_CSet(uint8_t CSet)
{
	//One GSvalues is 8 Bit long
	//EEMEM starts with addressing at 0
	//so the first element (Cset = 0) is at 8*CSet = 0 , second at 8*Cset = 8*1 ... usw
	cli();
 224:	f8 94       	cli
	eeprom_read_block (( void *) &actGSvalue , ( const void *)(CSet*8) , 8);
 226:	68 2f       	mov	r22, r24
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	66 0f       	add	r22, r22
 22c:	77 1f       	adc	r23, r23
 22e:	66 0f       	add	r22, r22
 230:	77 1f       	adc	r23, r23
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	48 e0       	ldi	r20, 0x08	; 8
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <eeprom_read_block>
	writeOutGSvalues(&actGSvalue);
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z16writeOutGSvaluesP8GSvalues>
	sei();
 24a:	78 94       	sei
 24c:	08 95       	ret

0000024e <_Z14process_switchv>:


void process_switch(void)
{
	//Short Press recognized
	if(get_key_short(1<<KEY0))
 24e:	88 e0       	ldi	r24, 0x08	; 8
 250:	0e 94 75 00 	call	0xea	; 0xea <_Z13get_key_shorth>
 254:	88 23       	and	r24, r24
 256:	91 f0       	breq	.+36     	; 0x27c <_Z14process_switchv+0x2e>
	{
		PORTB ^= (1<<PORTB0);
 258:	95 b1       	in	r25, 0x05	; 5
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	89 27       	eor	r24, r25
 25e:	85 b9       	out	0x05, r24	; 5
		CSet++;
 260:	80 91 59 01 	lds	r24, 0x0159
 264:	8f 5f       	subi	r24, 0xFF	; 255
		if (CSet == NUM_OF_SETS) CSet = 0;
 266:	85 30       	cpi	r24, 0x05	; 5
 268:	19 f0       	breq	.+6      	; 0x270 <_Z14process_switchv+0x22>
{
	//Short Press recognized
	if(get_key_short(1<<KEY0))
	{
		PORTB ^= (1<<PORTB0);
		CSet++;
 26a:	80 93 59 01 	sts	0x0159, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <_Z14process_switchv+0x26>
		if (CSet == NUM_OF_SETS) CSet = 0;
 270:	10 92 59 01 	sts	0x0159, r1
				
		switch_CSet(CSet);
 274:	80 91 59 01 	lds	r24, 0x0159
 278:	0e 94 12 01 	call	0x224	; 0x224 <_Z11switch_CSeth>
	}
			
	//long press recognized (needed for correct behaviour of get_key_rpt_l() )
	if( get_key_long_r( 1<<KEY0 ))
 27c:	88 e0       	ldi	r24, 0x08	; 8
 27e:	0e 94 88 00 	call	0x110	; 0x110 <_Z14get_key_long_rh>
 282:	88 23       	and	r24, r24
 284:	09 f0       	breq	.+2      	; 0x288 <_Z14process_switchv+0x3a>
	asm("nop");			//do nothing
 286:	00 00       	nop

			
	//Pressed an hold -> Dimming called every 50ms
	if(get_key_rpt_l( 1<<KEY0 ))
 288:	88 e0       	ldi	r24, 0x08	; 8
 28a:	0e 94 90 00 	call	0x120	; 0x120 <_Z13get_key_rpt_lh>
 28e:	88 23       	and	r24, r24
 290:	09 f4       	brne	.+2      	; 0x294 <_Z14process_switchv+0x46>
 292:	6f c0       	rjmp	.+222    	; 0x372 <_Z14process_switchv+0x124>
	{
		//LED_PORT ^= (1<<PORTB0);
		//All colors are treated the same
		if(dimm_direc == true) //dimm up
 294:	80 91 00 01 	lds	r24, 0x0100
 298:	88 23       	and	r24, r24
 29a:	d1 f1       	breq	.+116    	; 0x310 <_Z14process_switchv+0xc2>
		{
			if((actGSvalue.coldW1 <= (MAX_GS_VAL-DIMM_STEP)) && (actGSvalue.warmW1 <= (MAX_GS_VAL-DIMM_STEP)) &&
 29c:	80 91 01 01 	lds	r24, 0x0101
 2a0:	90 91 02 01 	lds	r25, 0x0102
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	92 07       	cpc	r25, r18
 2aa:	08 f0       	brcs	.+2      	; 0x2ae <_Z14process_switchv+0x60>
 2ac:	62 c0       	rjmp	.+196    	; 0x372 <_Z14process_switchv+0x124>
 2ae:	20 91 03 01 	lds	r18, 0x0103
 2b2:	30 91 04 01 	lds	r19, 0x0104
 2b6:	21 30       	cpi	r18, 0x01	; 1
 2b8:	4f ef       	ldi	r20, 0xFF	; 255
 2ba:	34 07       	cpc	r19, r20
 2bc:	08 f0       	brcs	.+2      	; 0x2c0 <_Z14process_switchv+0x72>
 2be:	59 c0       	rjmp	.+178    	; 0x372 <_Z14process_switchv+0x124>
			(actGSvalue.coldW2 <= (MAX_GS_VAL-DIMM_STEP)) && (actGSvalue.warmW2 <= (MAX_GS_VAL-DIMM_STEP)))
 2c0:	40 91 05 01 	lds	r20, 0x0105
 2c4:	50 91 06 01 	lds	r21, 0x0106
	{
		//LED_PORT ^= (1<<PORTB0);
		//All colors are treated the same
		if(dimm_direc == true) //dimm up
		{
			if((actGSvalue.coldW1 <= (MAX_GS_VAL-DIMM_STEP)) && (actGSvalue.warmW1 <= (MAX_GS_VAL-DIMM_STEP)) &&
 2c8:	41 30       	cpi	r20, 0x01	; 1
 2ca:	6f ef       	ldi	r22, 0xFF	; 255
 2cc:	56 07       	cpc	r21, r22
 2ce:	08 f0       	brcs	.+2      	; 0x2d2 <_Z14process_switchv+0x84>
 2d0:	50 c0       	rjmp	.+160    	; 0x372 <_Z14process_switchv+0x124>
			(actGSvalue.coldW2 <= (MAX_GS_VAL-DIMM_STEP)) && (actGSvalue.warmW2 <= (MAX_GS_VAL-DIMM_STEP)))
 2d2:	60 91 07 01 	lds	r22, 0x0107
 2d6:	70 91 08 01 	lds	r23, 0x0108
 2da:	61 30       	cpi	r22, 0x01	; 1
 2dc:	ef ef       	ldi	r30, 0xFF	; 255
 2de:	7e 07       	cpc	r23, r30
 2e0:	08 f0       	brcs	.+2      	; 0x2e4 <_Z14process_switchv+0x96>
 2e2:	47 c0       	rjmp	.+142    	; 0x372 <_Z14process_switchv+0x124>
			{
				actGSvalue.coldW1 += DIMM_STEP;
 2e4:	e1 e0       	ldi	r30, 0x01	; 1
 2e6:	f1 e0       	ldi	r31, 0x01	; 1
 2e8:	81 50       	subi	r24, 0x01	; 1
 2ea:	9f 4f       	sbci	r25, 0xFF	; 255
 2ec:	91 83       	std	Z+1, r25	; 0x01
 2ee:	80 83       	st	Z, r24
				actGSvalue.warmW1 += DIMM_STEP;
 2f0:	21 50       	subi	r18, 0x01	; 1
 2f2:	3f 4f       	sbci	r19, 0xFF	; 255
 2f4:	33 83       	std	Z+3, r19	; 0x03
 2f6:	22 83       	std	Z+2, r18	; 0x02
				actGSvalue.coldW2 += DIMM_STEP;
 2f8:	41 50       	subi	r20, 0x01	; 1
 2fa:	5f 4f       	sbci	r21, 0xFF	; 255
 2fc:	55 83       	std	Z+5, r21	; 0x05
 2fe:	44 83       	std	Z+4, r20	; 0x04
				actGSvalue.warmW2 += DIMM_STEP;
 300:	61 50       	subi	r22, 0x01	; 1
 302:	7f 4f       	sbci	r23, 0xFF	; 255
 304:	77 83       	std	Z+7, r23	; 0x07
 306:	66 83       	std	Z+6, r22	; 0x06
						
				//write out to chip
				writeOutGSvalues(&actGSvalue);
 308:	cf 01       	movw	r24, r30
 30a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z16writeOutGSvaluesP8GSvalues>
 30e:	31 c0       	rjmp	.+98     	; 0x372 <_Z14process_switchv+0x124>
			}
		}
		else
		{
			if((actGSvalue.coldW1 >= DIMM_STEP) && (actGSvalue.warmW1 >= DIMM_STEP) &&
 310:	80 91 01 01 	lds	r24, 0x0101
 314:	90 91 02 01 	lds	r25, 0x0102
 318:	8f 3f       	cpi	r24, 0xFF	; 255
 31a:	91 05       	cpc	r25, r1
 31c:	50 f1       	brcs	.+84     	; 0x372 <_Z14process_switchv+0x124>
 31e:	20 91 03 01 	lds	r18, 0x0103
 322:	30 91 04 01 	lds	r19, 0x0104
 326:	2f 3f       	cpi	r18, 0xFF	; 255
 328:	31 05       	cpc	r19, r1
 32a:	18 f1       	brcs	.+70     	; 0x372 <_Z14process_switchv+0x124>
			(actGSvalue.coldW2 >= DIMM_STEP) && (actGSvalue.warmW2 >= DIMM_STEP))
 32c:	40 91 05 01 	lds	r20, 0x0105
 330:	50 91 06 01 	lds	r21, 0x0106
				writeOutGSvalues(&actGSvalue);
			}
		}
		else
		{
			if((actGSvalue.coldW1 >= DIMM_STEP) && (actGSvalue.warmW1 >= DIMM_STEP) &&
 334:	4f 3f       	cpi	r20, 0xFF	; 255
 336:	51 05       	cpc	r21, r1
 338:	e0 f0       	brcs	.+56     	; 0x372 <_Z14process_switchv+0x124>
			(actGSvalue.coldW2 >= DIMM_STEP) && (actGSvalue.warmW2 >= DIMM_STEP))
 33a:	60 91 07 01 	lds	r22, 0x0107
 33e:	70 91 08 01 	lds	r23, 0x0108
 342:	6f 3f       	cpi	r22, 0xFF	; 255
 344:	71 05       	cpc	r23, r1
 346:	a8 f0       	brcs	.+42     	; 0x372 <_Z14process_switchv+0x124>
			{
				actGSvalue.coldW1 -= DIMM_STEP;
 348:	e1 e0       	ldi	r30, 0x01	; 1
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	8f 5f       	subi	r24, 0xFF	; 255
 34e:	91 09       	sbc	r25, r1
 350:	91 83       	std	Z+1, r25	; 0x01
 352:	80 83       	st	Z, r24
				actGSvalue.warmW1 -= DIMM_STEP;
 354:	2f 5f       	subi	r18, 0xFF	; 255
 356:	31 09       	sbc	r19, r1
 358:	33 83       	std	Z+3, r19	; 0x03
 35a:	22 83       	std	Z+2, r18	; 0x02
				actGSvalue.coldW2 -= DIMM_STEP;
 35c:	4f 5f       	subi	r20, 0xFF	; 255
 35e:	51 09       	sbc	r21, r1
 360:	55 83       	std	Z+5, r21	; 0x05
 362:	44 83       	std	Z+4, r20	; 0x04
				actGSvalue.warmW2 -= DIMM_STEP;
 364:	6f 5f       	subi	r22, 0xFF	; 255
 366:	71 09       	sbc	r23, r1
 368:	77 83       	std	Z+7, r23	; 0x07
 36a:	66 83       	std	Z+6, r22	; 0x06
						
				//write out to chip
				writeOutGSvalues(&actGSvalue);
 36c:	cf 01       	movw	r24, r30
 36e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z16writeOutGSvaluesP8GSvalues>
			}
		}
	}
			
	if(get_key_release( (1<<KEY0) ))
 372:	88 e0       	ldi	r24, 0x08	; 8
 374:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z15get_key_releaseh>
 378:	88 23       	and	r24, r24
 37a:	31 f0       	breq	.+12     	; 0x388 <_Z14process_switchv+0x13a>
	{
		dimm_direc = !dimm_direc;	//toggle dimming direction
 37c:	90 91 00 01 	lds	r25, 0x0100
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	89 27       	eor	r24, r25
 384:	80 93 00 01 	sts	0x0100, r24
 388:	08 95       	ret

0000038a <main>:
	//BTM222 Reset Configuration (not needed because of internal Pullup of the BTM222)
	/*DDRB |= (1<<PB1);
	PORTB |= (1<<PB1);		//high -> no Reset
	PORTB &= ~(1<<PB1);		//low  -> Reset   */

	SPI_init();
 38a:	0e 94 4a 02 	call	0x494	; 0x494 <_Z8SPI_initv>
	USART_Init(BAUDRATE);
 38e:	83 e3       	ldi	r24, 0x33	; 51
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 53 03 	call	0x6a6	; 0x6a6 <_Z10USART_Initj>


	//Configuration Timer0 (debouncing)
	TCCR0B = (1<<CS02)|(1<<CS00);	// divide by 1024
 396:	85 e0       	ldi	r24, 0x05	; 5
 398:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);			// enable timer interrupt
 39a:	ee e6       	ldi	r30, 0x6E	; 110
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	80 81       	ld	r24, Z
 3a0:	81 60       	ori	r24, 0x01	; 1
 3a2:	80 83       	st	Z, r24
	
	DDRB  |= (1 << PORTB0 );		//PB0 is output (LED)
 3a4:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= (1 <<PORTB0);			//Switch LED on
 3a6:	28 9a       	sbi	0x05, 0	; 5
		
	PORTD |= (1<<PORTD3);			//Activate Pullups for PD3 (Switch)
 3a8:	5b 9a       	sbi	0x0b, 3	; 11
	
	switch_CSet(CSet);				//Color set 0 ist default at startup
 3aa:	80 91 59 01 	lds	r24, 0x0159
 3ae:	0e 94 12 01 	call	0x224	; 0x224 <_Z11switch_CSeth>

	int faktor =257;

	
	
	sei();							//Enable Global Interrups (for USART)
 3b2:	78 94       	sei
 3b4:	0f 2e       	mov	r0, r31
 3b6:	f7 e1       	ldi	r31, 0x17	; 23
 3b8:	ef 2e       	mov	r14, r31
 3ba:	f1 e0       	ldi	r31, 0x01	; 1
 3bc:	ff 2e       	mov	r15, r31
 3be:	f0 2d       	mov	r31, r0
 3c0:	c0 e2       	ldi	r28, 0x20	; 32
 3c2:	d1 e0       	ldi	r29, 0x01	; 1
 3c4:	ae 2c       	mov	r10, r14
 3c6:	bf 2c       	mov	r11, r15
				}
				
				string[i] =  '\0';
				
				val = atoi(string);
				val = faktor*val;
 3c8:	cc 24       	eor	r12, r12
 3ca:	c3 94       	inc	r12
 3cc:	dc 2c       	mov	r13, r12
	sei();							//Enable Global Interrups (for USART)
	
    while (1) 
    {
			
		process_switch();			//collects the polling information from the button
 3ce:	0e 94 27 01 	call	0x24e	; 0x24e <_Z14process_switchv>
		
		if (DataInReceiveBuffer())
 3d2:	0e 94 c1 03 	call	0x782	; 0x782 <_Z19DataInReceiveBufferv>
 3d6:	88 23       	and	r24, r24
 3d8:	d1 f3       	breq	.-12     	; 0x3ce <main+0x44>
 3da:	ea 2d       	mov	r30, r10
 3dc:	fb 2d       	mov	r31, r11
		{
			for (int a = 0 ; a<9 ; a++)
			{
				string[a] = 0;
 3de:	11 92       	st	Z+, r1
			
		process_switch();			//collects the polling information from the button
		
		if (DataInReceiveBuffer())
		{
			for (int a = 0 ; a<9 ; a++)
 3e0:	ec 17       	cp	r30, r28
 3e2:	fd 07       	cpc	r31, r29
 3e4:	e1 f7       	brne	.-8      	; 0x3de <main+0x54>
			{
				string[a] = 0;
			}
			
			if(USART_Receive() == 'a')
 3e6:	0e 94 b0 03 	call	0x760	; 0x760 <_Z13USART_Receivev>
 3ea:	81 36       	cpi	r24, 0x61	; 97
 3ec:	81 f7       	brne	.-32     	; 0x3ce <main+0x44>
			{
				USART_Receive();	//space
 3ee:	0e 94 b0 03 	call	0x760	; 0x760 <_Z13USART_Receivev>
				i = 0;
 3f2:	10 92 12 01 	sts	0x0112, r1
 3f6:	10 92 11 01 	sts	0x0111, r1
				tmp = 0;
 3fa:	10 92 14 01 	sts	0x0114, r1
 3fe:	10 92 13 01 	sts	0x0113, r1
				while(tmp != '\n')
				{
					tmp = USART_Receive();
 402:	0e 94 b0 03 	call	0x760	; 0x760 <_Z13USART_Receivev>
 406:	48 2f       	mov	r20, r24
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	50 93 14 01 	sts	0x0114, r21
 40e:	40 93 13 01 	sts	0x0113, r20
					string[i] = tmp;	
 412:	20 91 11 01 	lds	r18, 0x0111
 416:	30 91 12 01 	lds	r19, 0x0112
 41a:	f9 01       	movw	r30, r18
 41c:	e9 5e       	subi	r30, 0xE9	; 233
 41e:	fe 4f       	sbci	r31, 0xFE	; 254
 420:	80 83       	st	Z, r24
					i++;
 422:	2f 5f       	subi	r18, 0xFF	; 255
 424:	3f 4f       	sbci	r19, 0xFF	; 255
 426:	30 93 12 01 	sts	0x0112, r19
 42a:	20 93 11 01 	sts	0x0111, r18
			if(USART_Receive() == 'a')
			{
				USART_Receive();	//space
				i = 0;
				tmp = 0;
				while(tmp != '\n')
 42e:	4a 30       	cpi	r20, 0x0A	; 10
 430:	51 05       	cpc	r21, r1
 432:	39 f7       	brne	.-50     	; 0x402 <main+0x78>
					tmp = USART_Receive();
					string[i] = tmp;	
					i++;
				}
				
				string[i] =  '\0';
 434:	f9 01       	movw	r30, r18
 436:	e9 5e       	subi	r30, 0xE9	; 233
 438:	fe 4f       	sbci	r31, 0xFE	; 254
 43a:	10 82       	st	Z, r1
				
				val = atoi(string);
 43c:	c7 01       	movw	r24, r14
 43e:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <atoi>
				val = faktor*val;
 442:	8c 9d       	mul	r24, r12
 444:	a0 01       	movw	r20, r0
 446:	8d 9d       	mul	r24, r13
 448:	50 0d       	add	r21, r0
 44a:	9c 9d       	mul	r25, r12
 44c:	50 0d       	add	r21, r0
 44e:	11 24       	eor	r1, r1
 450:	50 93 16 01 	sts	0x0116, r21
 454:	40 93 15 01 	sts	0x0115, r20
				
				myChip.setGreyScale(3, val, val, val);
 458:	8a 01       	movw	r16, r20
 45a:	9a 01       	movw	r18, r20
 45c:	63 e0       	ldi	r22, 0x03	; 3
 45e:	81 e2       	ldi	r24, 0x21	; 33
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN8TLC5971112setGreyScaleEhjjj>
				myChip.setGreyScale(2, val, val, val);
 466:	40 91 15 01 	lds	r20, 0x0115
 46a:	50 91 16 01 	lds	r21, 0x0116
 46e:	8a 01       	movw	r16, r20
 470:	9a 01       	movw	r18, r20
 472:	62 e0       	ldi	r22, 0x02	; 2
 474:	81 e2       	ldi	r24, 0x21	; 33
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	0e 94 25 03 	call	0x64a	; 0x64a <_ZN8TLC5971112setGreyScaleEhjjj>
 47c:	a8 cf       	rjmp	.-176    	; 0x3ce <main+0x44>

0000047e <_GLOBAL__sub_I_GScSets>:
			}
		}
	}
		
}
 47e:	0f 93       	push	r16
bool dimm_direc = true;			//true  = up
//false = down

uint8_t CSet = 0;				//Color Set

TLC59711 myChip;
 480:	01 e0       	ldi	r16, 0x01	; 1
 482:	20 e0       	ldi	r18, 0x00	; 0
 484:	40 e0       	ldi	r20, 0x00	; 0
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	81 e2       	ldi	r24, 0x21	; 33
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 65 02 	call	0x4ca	; 0x4ca <_ZN8TLC59711C1Ebbbb>
				myChip.setGreyScale(2, val, val, val);
			}
		}
	}
		
}
 490:	0f 91       	pop	r16
 492:	08 95       	ret

00000494 <_Z8SPI_initv>:
#include "spi.h"

void SPI_init(void)
{
	/* Set MOSI and SCK output, all others input */
	DDRB = (1<<PB3)|(1<<PB5)|(1<<PB2);		//DDRB The Port B Data Direction Register (1 = Output)
 494:	8c e2       	ldi	r24, 0x2C	; 44
 496:	84 b9       	out	0x04, r24	; 4
	// PB3 = 3 = MOSI ; PB5 = 5 = SCK ; PB2 = SS
	
	/* Enable SPI, set Master, set clock rate fclk/4 */
	SPCR = (1<<SPE)|(1<<MSTR)|(0<<SPR0);
 498:	80 e5       	ldi	r24, 0x50	; 80
 49a:	8c bd       	out	0x2c, r24	; 44
	
	//Set SS to high (not active)
	PORTB |= (1 << PB2);
 49c:	2a 9a       	sbi	0x05, 2	; 5
 49e:	08 95       	ret

000004a0 <_Z15SPI_transfairnbPhi>:


void SPI_transfairnb(uint8_t* cData, int len)
{
	/* Start transmission */
	PORTB &= ~(1<<PB2);								// set SS to low
 4a0:	2a 98       	cbi	0x05, 2	; 5
	
	for (int i = 0 ; i < len ; i++)
 4a2:	16 16       	cp	r1, r22
 4a4:	17 06       	cpc	r1, r23
 4a6:	7c f4       	brge	.+30     	; 0x4c6 <_Z15SPI_transfairnbPhi+0x26>
 4a8:	fc 01       	movw	r30, r24
 4aa:	68 0f       	add	r22, r24
 4ac:	79 1f       	adc	r23, r25
 4ae:	df 01       	movw	r26, r30
	{
		SPDR = *(cData + i);						//SPDR = SPI Data Register
 4b0:	90 81       	ld	r25, Z
 4b2:	9e bd       	out	0x2e, r25	; 46
		
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));					// SPIF = SPI Interrupt Flag, gets set if the transmit is completed
 4b4:	0d b4       	in	r0, 0x2d	; 45
 4b6:	07 fe       	sbrs	r0, 7
 4b8:	fd cf       	rjmp	.-6      	; 0x4b4 <_Z15SPI_transfairnbPhi+0x14>
		*(cData + i) = SPDR;						// cleared by first reading the SPI Status Register with SPIF set, then accessing the SPDR
 4ba:	9e b5       	in	r25, 0x2e	; 46
 4bc:	9c 93       	st	X, r25
 4be:	31 96       	adiw	r30, 0x01	; 1
void SPI_transfairnb(uint8_t* cData, int len)
{
	/* Start transmission */
	PORTB &= ~(1<<PB2);								// set SS to low
	
	for (int i = 0 ; i < len ; i++)
 4c0:	e6 17       	cp	r30, r22
 4c2:	f7 07       	cpc	r31, r23
 4c4:	a1 f7       	brne	.-24     	; 0x4ae <_Z15SPI_transfairnbPhi+0xe>
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));					// SPIF = SPI Interrupt Flag, gets set if the transmit is completed
		*(cData + i) = SPDR;						// cleared by first reading the SPI Status Register with SPIF set, then accessing the SPDR
	}
	
	PORTB |= (1<<PB2);								// set SS to high
 4c6:	2a 9a       	sbi	0x05, 2	; 5
 4c8:	08 95       	ret

000004ca <_ZN8TLC59711C1Ebbbb>:
#endif

#include "TLC59711.h"
#include <util/delay.h>

TLC59711::TLC59711(bool OUTMMG,
 4ca:	0f 93       	push	r16
 4cc:	dc 01       	movw	r26, r24
                   bool EXTGCK,
                   bool TMGRST,
                   bool DSPRPT) 
{
    control_data.write_cmd = 0x25;
 4ce:	8c 91       	ld	r24, X
 4d0:	80 7c       	andi	r24, 0xC0	; 192
    
    control_data.OUTMMG = OUTMMG;
 4d2:	85 62       	ori	r24, 0x25	; 37
 4d4:	60 fb       	bst	r22, 0
 4d6:	86 f9       	bld	r24, 6
    control_data.EXTGCK = EXTGCK;
 4d8:	40 fb       	bst	r20, 0
 4da:	87 f9       	bld	r24, 7
 4dc:	8c 93       	st	X, r24
    control_data.TMGRST = TMGRST;
 4de:	11 96       	adiw	r26, 0x01	; 1
 4e0:	8c 91       	ld	r24, X
 4e2:	11 97       	sbiw	r26, 0x01	; 1
 4e4:	20 fb       	bst	r18, 0
 4e6:	80 f9       	bld	r24, 0
    control_data.DSPRPT = DSPRPT;
 4e8:	00 fb       	bst	r16, 0
 4ea:	81 f9       	bld	r24, 1
    control_data.BLANK  = false;
 4ec:	83 70       	andi	r24, 0x03	; 3
    
    //Global Brightnes control -> all high (7Bit)
    control_data.BCr = 0x7F;
    control_data.BCg = 0x7F;
 4ee:	9f ef       	ldi	r25, 0xFF	; 255
 4f0:	13 96       	adiw	r26, 0x03	; 3
 4f2:	9c 93       	st	X, r25
 4f4:	13 97       	sbiw	r26, 0x03	; 3
    control_data.BCb = 0x7F;
 4f6:	88 6f       	ori	r24, 0xF8	; 248
 4f8:	11 96       	adiw	r26, 0x01	; 1
 4fa:	8c 93       	st	X, r24
 4fc:	11 97       	sbiw	r26, 0x01	; 1
 4fe:	12 96       	adiw	r26, 0x02	; 2
 500:	9c 93       	st	X, r25
 502:	12 97       	sbiw	r26, 0x02	; 2
 504:	fd 01       	movw	r30, r26
 506:	34 96       	adiw	r30, 0x04	; 4
 508:	cd 01       	movw	r24, r26
 50a:	4c 96       	adiw	r24, 0x1c	; 28

    
    //Greyscale control 12 Channels -> all low
    for (int i = 0 ; i <12 ; i++)
    {
        GS[i]  = 0;
 50c:	11 92       	st	Z+, r1
 50e:	11 92       	st	Z+, r1
    control_data.BCg = 0x7F;
    control_data.BCb = 0x7F;

    
    //Greyscale control 12 Channels -> all low
    for (int i = 0 ; i <12 ; i++)
 510:	e8 17       	cp	r30, r24
 512:	f9 07       	cpc	r31, r25
 514:	d9 f7       	brne	.-10     	; 0x50c <_ZN8TLC59711C1Ebbbb+0x42>
    {
        GS[i]  = 0;
    }
}
 516:	0f 91       	pop	r16
 518:	08 95       	ret

0000051a <_ZN8TLC5971113write_to_chipEv>:
    }
    write_to_chip();
}

void TLC59711::write_to_chip()
{
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	ac 01       	movw	r20, r24

    //Flags
    m_buffer[0] = (control_data.write_cmd << 2) | (control_data.OUTMMG << 1) | control_data.EXTGCK;
 520:	dc 01       	movw	r26, r24
 522:	8c 91       	ld	r24, X
 524:	98 2f       	mov	r25, r24
 526:	99 0f       	add	r25, r25
 528:	99 0f       	add	r25, r25
 52a:	86 fb       	bst	r24, 6
 52c:	22 27       	eor	r18, r18
 52e:	20 f9       	bld	r18, 0
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	22 0f       	add	r18, r18
 534:	33 1f       	adc	r19, r19
 536:	29 2b       	or	r18, r25
 538:	87 fb       	bst	r24, 7
 53a:	99 27       	eor	r25, r25
 53c:	90 f9       	bld	r25, 0
 53e:	82 2f       	mov	r24, r18
 540:	89 2b       	or	r24, r25
 542:	5c 96       	adiw	r26, 0x1c	; 28
 544:	8c 93       	st	X, r24
 546:	5c 97       	sbiw	r26, 0x1c	; 28
    m_buffer[1] = (control_data.TMGRST << 7)    | (control_data.DSPRPT << 6) | (control_data.BLANK << 5);

    //Global brightness - BC
    m_buffer[1] |= control_data.BCb >> 2;
 548:	11 96       	adiw	r26, 0x01	; 1
 54a:	8c 91       	ld	r24, X
 54c:	11 97       	sbiw	r26, 0x01	; 1
 54e:	98 2f       	mov	r25, r24
 550:	96 95       	lsr	r25
 552:	96 95       	lsr	r25
 554:	96 95       	lsr	r25
 556:	12 96       	adiw	r26, 0x02	; 2
 558:	2c 91       	ld	r18, X
 55a:	62 2f       	mov	r22, r18
 55c:	63 70       	andi	r22, 0x03	; 3
 55e:	62 95       	swap	r22
 560:	66 0f       	add	r22, r22
 562:	60 7e       	andi	r22, 0xE0	; 224
 564:	69 2b       	or	r22, r25
 566:	70 e0       	ldi	r23, 0x00	; 0
void TLC59711::write_to_chip()
{

    //Flags
    m_buffer[0] = (control_data.write_cmd << 2) | (control_data.OUTMMG << 1) | control_data.EXTGCK;
    m_buffer[1] = (control_data.TMGRST << 7)    | (control_data.DSPRPT << 6) | (control_data.BLANK << 5);
 568:	81 fb       	bst	r24, 1
 56a:	aa 27       	eor	r26, r26
 56c:	a0 f9       	bld	r26, 0
 56e:	b0 e0       	ldi	r27, 0x00	; 0
 570:	00 24       	eor	r0, r0
 572:	b6 95       	lsr	r27
 574:	a7 95       	ror	r26
 576:	07 94       	ror	r0
 578:	b6 95       	lsr	r27
 57a:	a7 95       	ror	r26
 57c:	07 94       	ror	r0
 57e:	ba 2f       	mov	r27, r26
 580:	a0 2d       	mov	r26, r0
 582:	98 2f       	mov	r25, r24
 584:	97 95       	ror	r25
 586:	99 27       	eor	r25, r25
 588:	97 95       	ror	r25
 58a:	a9 2b       	or	r26, r25
 58c:	82 fb       	bst	r24, 2
 58e:	ee 27       	eor	r30, r30
 590:	e0 f9       	bld	r30, 0
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	ee 0f       	add	r30, r30
 596:	ff 1f       	adc	r31, r31
 598:	e2 95       	swap	r30
 59a:	f2 95       	swap	r31
 59c:	f0 7f       	andi	r31, 0xF0	; 240
 59e:	fe 27       	eor	r31, r30
 5a0:	e0 7f       	andi	r30, 0xF0	; 240
 5a2:	fe 27       	eor	r31, r30
 5a4:	ea 2b       	or	r30, r26

    //Global brightness - BC
    m_buffer[1] |= control_data.BCb >> 2;
 5a6:	cb 01       	movw	r24, r22
 5a8:	95 95       	asr	r25
 5aa:	87 95       	ror	r24
 5ac:	95 95       	asr	r25
 5ae:	87 95       	ror	r24
 5b0:	e8 2b       	or	r30, r24
 5b2:	da 01       	movw	r26, r20
 5b4:	5d 96       	adiw	r26, 0x1d	; 29
 5b6:	ec 93       	st	X, r30
 5b8:	5d 97       	sbiw	r26, 0x1d	; 29
    m_buffer[2] = (control_data.BCb << 6) | control_data.BCg >> 1;
 5ba:	82 2f       	mov	r24, r18
 5bc:	86 95       	lsr	r24
 5be:	86 95       	lsr	r24
 5c0:	13 96       	adiw	r26, 0x03	; 3
 5c2:	ec 91       	ld	r30, X
 5c4:	13 97       	sbiw	r26, 0x03	; 3
 5c6:	2e 2f       	mov	r18, r30
 5c8:	21 70       	andi	r18, 0x01	; 1
 5ca:	22 95       	swap	r18
 5cc:	22 0f       	add	r18, r18
 5ce:	22 0f       	add	r18, r18
 5d0:	20 7c       	andi	r18, 0xC0	; 192
 5d2:	92 2f       	mov	r25, r18
 5d4:	98 2b       	or	r25, r24
 5d6:	29 2f       	mov	r18, r25
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	c9 01       	movw	r24, r18
 5dc:	95 95       	asr	r25
 5de:	87 95       	ror	r24
 5e0:	00 24       	eor	r0, r0
 5e2:	76 95       	lsr	r23
 5e4:	67 95       	ror	r22
 5e6:	07 94       	ror	r0
 5e8:	76 95       	lsr	r23
 5ea:	67 95       	ror	r22
 5ec:	07 94       	ror	r0
 5ee:	76 2f       	mov	r23, r22
 5f0:	60 2d       	mov	r22, r0
 5f2:	68 2b       	or	r22, r24
 5f4:	5e 96       	adiw	r26, 0x1e	; 30
 5f6:	6c 93       	st	X, r22
 5f8:	5e 97       	sbiw	r26, 0x1e	; 30
    m_buffer[3] =  control_data.BCg << 7  | control_data.BCr;
 5fa:	36 95       	lsr	r19
 5fc:	32 2f       	mov	r19, r18
 5fe:	22 27       	eor	r18, r18
 600:	37 95       	ror	r19
 602:	27 95       	ror	r18
 604:	e6 95       	lsr	r30
 606:	2e 2b       	or	r18, r30
 608:	5f 96       	adiw	r26, 0x1f	; 31
 60a:	2c 93       	st	X, r18
 60c:	5f 97       	sbiw	r26, 0x1f	; 31
 60e:	fa 01       	movw	r30, r20
 610:	7c 96       	adiw	r30, 0x1c	; 28
 612:	91 96       	adiw	r26, 0x21	; 33
 614:	ba 01       	movw	r22, r20
 616:	6c 5f       	subi	r22, 0xFC	; 252
 618:	7f 4f       	sbci	r23, 0xFF	; 255
 61a:	32 97       	sbiw	r30, 0x02	; 2
    
    //Greyscale - GS
    int a = 11;
    for (int i = 4 ; i < 28 ; i = i+2)
    {
        m_buffer[i] = GS[a] >> 8;
 61c:	90 81       	ld	r25, Z
 61e:	21 81       	ldd	r18, Z+1	; 0x01
 620:	ed 01       	movw	r28, r26
 622:	21 97       	sbiw	r28, 0x01	; 1
 624:	28 83       	st	Y, r18
        m_buffer[i+1] = (GS[a]<< 8) >> 8;
 626:	9c 93       	st	X, r25
 628:	12 96       	adiw	r26, 0x02	; 2
    m_buffer[2] = (control_data.BCb << 6) | control_data.BCg >> 1;
    m_buffer[3] =  control_data.BCg << 7  | control_data.BCr;
    
    //Greyscale - GS
    int a = 11;
    for (int i = 4 ; i < 28 ; i = i+2)
 62a:	e6 17       	cp	r30, r22
 62c:	f7 07       	cpc	r31, r23
 62e:	a9 f7       	brne	.-22     	; 0x61a <_ZN8TLC5971113write_to_chipEv+0x100>
        m_buffer[i] = GS[a] >> 8;
        m_buffer[i+1] = (GS[a]<< 8) >> 8;
        a--;
    }
	
	SPI_transfairnb(m_buffer, 28);
 630:	6c e1       	ldi	r22, 0x1C	; 28
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	ca 01       	movw	r24, r20
 636:	4c 96       	adiw	r24, 0x1c	; 28
 638:	0e 94 50 02 	call	0x4a0	; 0x4a0 <_Z15SPI_transfairnbPhi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 63c:	b5 e3       	ldi	r27, 0x35	; 53
 63e:	ba 95       	dec	r27
 640:	f1 f7       	brne	.-4      	; 0x63e <_ZN8TLC5971113write_to_chipEv+0x124>
 642:	00 00       	nop
//    //Greyscale - GS
//    for (int i = 2 ; i < 14 ; i++)
//    {
//        m_buffer[i] = GS[i-2];
//    }
}
 644:	df 91       	pop	r29
 646:	cf 91       	pop	r28
 648:	08 95       	ret

0000064a <_ZN8TLC5971112setGreyScaleEhjjj>:
    //bcm2835_close();
//}


void TLC59711::setGreyScale(uint8_t RGBgroup, uint16_t GSr, uint16_t GSg, uint16_t GSb)
{
 64a:	0f 93       	push	r16
 64c:	1f 93       	push	r17
    switch(RGBgroup)
 64e:	61 30       	cpi	r22, 0x01	; 1
 650:	71 f0       	breq	.+28     	; 0x66e <_ZN8TLC5971112setGreyScaleEhjjj+0x24>
 652:	28 f0       	brcs	.+10     	; 0x65e <_ZN8TLC5971112setGreyScaleEhjjj+0x14>
 654:	62 30       	cpi	r22, 0x02	; 2
 656:	99 f0       	breq	.+38     	; 0x67e <_ZN8TLC5971112setGreyScaleEhjjj+0x34>
 658:	63 30       	cpi	r22, 0x03	; 3
 65a:	c9 f0       	breq	.+50     	; 0x68e <_ZN8TLC5971112setGreyScaleEhjjj+0x44>
 65c:	1f c0       	rjmp	.+62     	; 0x69c <_ZN8TLC5971112setGreyScaleEhjjj+0x52>
    {
        case 0:
            GS[0]  = GSb;
 65e:	fc 01       	movw	r30, r24
 660:	15 83       	std	Z+5, r17	; 0x05
 662:	04 83       	std	Z+4, r16	; 0x04
            GS[1]  = GSg;
 664:	37 83       	std	Z+7, r19	; 0x07
 666:	26 83       	std	Z+6, r18	; 0x06
            GS[2]  = GSr;
 668:	51 87       	std	Z+9, r21	; 0x09
 66a:	40 87       	std	Z+8, r20	; 0x08
            break;
 66c:	17 c0       	rjmp	.+46     	; 0x69c <_ZN8TLC5971112setGreyScaleEhjjj+0x52>
        case 1:
            GS[3]  = GSb;
 66e:	fc 01       	movw	r30, r24
 670:	13 87       	std	Z+11, r17	; 0x0b
 672:	02 87       	std	Z+10, r16	; 0x0a
            GS[4]  = GSg;
 674:	35 87       	std	Z+13, r19	; 0x0d
 676:	24 87       	std	Z+12, r18	; 0x0c
            GS[5]  = GSr;
 678:	57 87       	std	Z+15, r21	; 0x0f
 67a:	46 87       	std	Z+14, r20	; 0x0e
            break;
 67c:	0f c0       	rjmp	.+30     	; 0x69c <_ZN8TLC5971112setGreyScaleEhjjj+0x52>
        case 2:
            GS[6]  = GSb;
 67e:	fc 01       	movw	r30, r24
 680:	11 8b       	std	Z+17, r17	; 0x11
 682:	00 8b       	std	Z+16, r16	; 0x10
            GS[7]  = GSg;
 684:	33 8b       	std	Z+19, r19	; 0x13
 686:	22 8b       	std	Z+18, r18	; 0x12
            GS[8]  = GSr;
 688:	55 8b       	std	Z+21, r21	; 0x15
 68a:	44 8b       	std	Z+20, r20	; 0x14
            break;
 68c:	07 c0       	rjmp	.+14     	; 0x69c <_ZN8TLC5971112setGreyScaleEhjjj+0x52>
        case 3:
            GS[9]  = GSb;
 68e:	fc 01       	movw	r30, r24
 690:	17 8b       	std	Z+23, r17	; 0x17
 692:	06 8b       	std	Z+22, r16	; 0x16
            GS[10] = GSg;
 694:	31 8f       	std	Z+25, r19	; 0x19
 696:	20 8f       	std	Z+24, r18	; 0x18
            GS[11] = GSr;
 698:	53 8f       	std	Z+27, r21	; 0x1b
 69a:	42 8f       	std	Z+26, r20	; 0x1a
            break;
        default:
            break;
    }
    write_to_chip();
 69c:	0e 94 8d 02 	call	0x51a	; 0x51a <_ZN8TLC5971113write_to_chipEv>
}
 6a0:	1f 91       	pop	r17
 6a2:	0f 91       	pop	r16
 6a4:	08 95       	ret

000006a6 <_Z10USART_Initj>:
void USART_Init( unsigned int baudrate )
{
	unsigned char x;

	/* Set the baud rate */
	UBRR0H = (unsigned char) (baudrate>>8);                  
 6a6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) baudrate;
 6aa:	80 93 c4 00 	sts	0x00C4, r24
	
	/* Enable UART receiver and transmitter */
	UCSR0B = ( ( 1 << RXCIE0 ) | ( 1 << RXEN0 ) | ( 1 << TXEN0 ) ); 
 6ae:	88 e9       	ldi	r24, 0x98	; 152
 6b0:	80 93 c1 00 	sts	0x00C1, r24
	
	/* Set frame format: 8 data, no parity, 1 stop */
	//UCSR0C = (1<<URSEL)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0); for atmega8
	
	/* Set frame format: 8 data, no parity, 1 stop */
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 6b4:	86 e0       	ldi	r24, 0x06	; 6
 6b6:	80 93 c2 00 	sts	0x00C2, r24
	
	
	/* Flush receive buffer */
	x = 0; 			    

	USART_RxTail = x;
 6ba:	10 92 dc 01 	sts	0x01DC, r1
	USART_RxHead = x;
 6be:	10 92 dd 01 	sts	0x01DD, r1
	USART_TxTail = x;
 6c2:	10 92 5a 01 	sts	0x015A, r1
	USART_TxHead = x;
 6c6:	10 92 5b 01 	sts	0x015B, r1
 6ca:	08 95       	ret

000006cc <__vector_18>:
}

/* Interrupt handlers */
ISR(USART_RX_vect)
{
 6cc:	1f 92       	push	r1
 6ce:	0f 92       	push	r0
 6d0:	0f b6       	in	r0, 0x3f	; 63
 6d2:	0f 92       	push	r0
 6d4:	11 24       	eor	r1, r1
 6d6:	8f 93       	push	r24
 6d8:	9f 93       	push	r25
 6da:	ef 93       	push	r30
 6dc:	ff 93       	push	r31
	
	unsigned char data;
	unsigned char tmphead;

	/* Read the received data */
	data = UDR0;                 
 6de:	80 91 c6 00 	lds	r24, 0x00C6
	/* Calculate buffer index */
	tmphead = ( USART_RxHead + 1 ) & USART_RX_BUFFER_MASK;
 6e2:	e0 91 dd 01 	lds	r30, 0x01DD
 6e6:	ef 5f       	subi	r30, 0xFF	; 255
 6e8:	ef 77       	andi	r30, 0x7F	; 127
	USART_RxHead = tmphead;      /* Store new index */
 6ea:	e0 93 dd 01 	sts	0x01DD, r30

	if ( tmphead == USART_RxTail )
 6ee:	90 91 dc 01 	lds	r25, 0x01DC
	{
		/* ERROR! Receive buffer overflow */
	}
	
	USART_RxBuf[tmphead] = data; /* Store received data in buffer */
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	e2 52       	subi	r30, 0x22	; 34
 6f6:	fe 4f       	sbci	r31, 0xFE	; 254
 6f8:	80 83       	st	Z, r24
}
 6fa:	ff 91       	pop	r31
 6fc:	ef 91       	pop	r30
 6fe:	9f 91       	pop	r25
 700:	8f 91       	pop	r24
 702:	0f 90       	pop	r0
 704:	0f be       	out	0x3f, r0	; 63
 706:	0f 90       	pop	r0
 708:	1f 90       	pop	r1
 70a:	18 95       	reti

0000070c <__vector_19>:

ISR(USART_UDRE_vect)
{
 70c:	1f 92       	push	r1
 70e:	0f 92       	push	r0
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	0f 92       	push	r0
 714:	11 24       	eor	r1, r1
 716:	8f 93       	push	r24
 718:	9f 93       	push	r25
 71a:	ef 93       	push	r30
 71c:	ff 93       	push	r31
	unsigned char tmptail;

	/* Check if all data is transmitted */
	if ( USART_TxHead != USART_TxTail )
 71e:	90 91 5b 01 	lds	r25, 0x015B
 722:	80 91 5a 01 	lds	r24, 0x015A
 726:	98 17       	cp	r25, r24
 728:	69 f0       	breq	.+26     	; 0x744 <__vector_19+0x38>
	{
		/* Calculate buffer index */
		tmptail = ( USART_TxTail + 1 ) & USART_TX_BUFFER_MASK;
 72a:	e0 91 5a 01 	lds	r30, 0x015A
 72e:	ef 5f       	subi	r30, 0xFF	; 255
 730:	ef 77       	andi	r30, 0x7F	; 127
		USART_TxTail = tmptail;      /* Store new index */
 732:	e0 93 5a 01 	sts	0x015A, r30
	
		UDR0 = USART_TxBuf[tmptail];  /* Start transmition */
 736:	f0 e0       	ldi	r31, 0x00	; 0
 738:	e4 5a       	subi	r30, 0xA4	; 164
 73a:	fe 4f       	sbci	r31, 0xFE	; 254
 73c:	80 81       	ld	r24, Z
 73e:	80 93 c6 00 	sts	0x00C6, r24
 742:	05 c0       	rjmp	.+10     	; 0x74e <__vector_19+0x42>
	}
	else
	{
		UCSR0B &= ~(1<<UDRIE0);         /* Disable UDRE interrupt */
 744:	e1 ec       	ldi	r30, 0xC1	; 193
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	80 81       	ld	r24, Z
 74a:	8f 7d       	andi	r24, 0xDF	; 223
 74c:	80 83       	st	Z, r24
	}
}
 74e:	ff 91       	pop	r31
 750:	ef 91       	pop	r30
 752:	9f 91       	pop	r25
 754:	8f 91       	pop	r24
 756:	0f 90       	pop	r0
 758:	0f be       	out	0x3f, r0	; 63
 75a:	0f 90       	pop	r0
 75c:	1f 90       	pop	r1
 75e:	18 95       	reti

00000760 <_Z13USART_Receivev>:
/* Read and write functions */
unsigned char USART_Receive( void )
{
	unsigned char tmptail;
	
	while ( USART_RxHead == USART_RxTail );  /* Wait for incomming data */
 760:	90 91 dd 01 	lds	r25, 0x01DD
 764:	80 91 dc 01 	lds	r24, 0x01DC
 768:	98 17       	cp	r25, r24
 76a:	d1 f3       	breq	.-12     	; 0x760 <_Z13USART_Receivev>
		
	tmptail = ( USART_RxTail + 1 ) & USART_RX_BUFFER_MASK;/* Calculate buffer index */
 76c:	e0 91 dc 01 	lds	r30, 0x01DC
 770:	ef 5f       	subi	r30, 0xFF	; 255
 772:	ef 77       	andi	r30, 0x7F	; 127
	
	USART_RxTail = tmptail;                /* Store new index */
 774:	e0 93 dc 01 	sts	0x01DC, r30
	
	return USART_RxBuf[tmptail];  /* Return data */
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	e2 52       	subi	r30, 0x22	; 34
 77c:	fe 4f       	sbci	r31, 0xFE	; 254
}
 77e:	80 81       	ld	r24, Z
 780:	08 95       	ret

00000782 <_Z19DataInReceiveBufferv>:
	UCSR0B |= (1<<UDRIE0);                    /* Enable UDRE interrupt */
}

unsigned char DataInReceiveBuffer( void )
{
	return ( USART_RxHead != USART_RxTail ); /* Return 0 (FALSE) if the receive buffer is empty */
 782:	20 91 dd 01 	lds	r18, 0x01DD
 786:	90 91 dc 01 	lds	r25, 0x01DC
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	29 13       	cpse	r18, r25
 78e:	01 c0       	rjmp	.+2      	; 0x792 <_Z19DataInReceiveBufferv+0x10>
 790:	80 e0       	ldi	r24, 0x00	; 0
}
 792:	08 95       	ret

00000794 <__tablejump2__>:
 794:	ee 0f       	add	r30, r30
 796:	ff 1f       	adc	r31, r31
 798:	05 90       	lpm	r0, Z+
 79a:	f4 91       	lpm	r31, Z
 79c:	e0 2d       	mov	r30, r0
 79e:	09 94       	ijmp

000007a0 <atoi>:
 7a0:	fc 01       	movw	r30, r24
 7a2:	88 27       	eor	r24, r24
 7a4:	99 27       	eor	r25, r25
 7a6:	e8 94       	clt
 7a8:	21 91       	ld	r18, Z+
 7aa:	20 32       	cpi	r18, 0x20	; 32
 7ac:	e9 f3       	breq	.-6      	; 0x7a8 <atoi+0x8>
 7ae:	29 30       	cpi	r18, 0x09	; 9
 7b0:	10 f0       	brcs	.+4      	; 0x7b6 <atoi+0x16>
 7b2:	2e 30       	cpi	r18, 0x0E	; 14
 7b4:	c8 f3       	brcs	.-14     	; 0x7a8 <atoi+0x8>
 7b6:	2b 32       	cpi	r18, 0x2B	; 43
 7b8:	41 f0       	breq	.+16     	; 0x7ca <atoi+0x2a>
 7ba:	2d 32       	cpi	r18, 0x2D	; 45
 7bc:	39 f4       	brne	.+14     	; 0x7cc <atoi+0x2c>
 7be:	68 94       	set
 7c0:	04 c0       	rjmp	.+8      	; 0x7ca <atoi+0x2a>
 7c2:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__mulhi_const_10>
 7c6:	82 0f       	add	r24, r18
 7c8:	91 1d       	adc	r25, r1
 7ca:	21 91       	ld	r18, Z+
 7cc:	20 53       	subi	r18, 0x30	; 48
 7ce:	2a 30       	cpi	r18, 0x0A	; 10
 7d0:	c0 f3       	brcs	.-16     	; 0x7c2 <atoi+0x22>
 7d2:	1e f4       	brtc	.+6      	; 0x7da <atoi+0x3a>
 7d4:	90 95       	com	r25
 7d6:	81 95       	neg	r24
 7d8:	9f 4f       	sbci	r25, 0xFF	; 255
 7da:	08 95       	ret

000007dc <__mulhi_const_10>:
 7dc:	7a e0       	ldi	r23, 0x0A	; 10
 7de:	97 9f       	mul	r25, r23
 7e0:	90 2d       	mov	r25, r0
 7e2:	87 9f       	mul	r24, r23
 7e4:	80 2d       	mov	r24, r0
 7e6:	91 0d       	add	r25, r1
 7e8:	11 24       	eor	r1, r1
 7ea:	08 95       	ret

000007ec <eeprom_read_block>:
 7ec:	dc 01       	movw	r26, r24
 7ee:	cb 01       	movw	r24, r22

000007f0 <eeprom_read_blraw>:
 7f0:	fc 01       	movw	r30, r24
 7f2:	f9 99       	sbic	0x1f, 1	; 31
 7f4:	fe cf       	rjmp	.-4      	; 0x7f2 <eeprom_read_blraw+0x2>
 7f6:	06 c0       	rjmp	.+12     	; 0x804 <eeprom_read_blraw+0x14>
 7f8:	f2 bd       	out	0x22, r31	; 34
 7fa:	e1 bd       	out	0x21, r30	; 33
 7fc:	f8 9a       	sbi	0x1f, 0	; 31
 7fe:	31 96       	adiw	r30, 0x01	; 1
 800:	00 b4       	in	r0, 0x20	; 32
 802:	0d 92       	st	X+, r0
 804:	41 50       	subi	r20, 0x01	; 1
 806:	50 40       	sbci	r21, 0x00	; 0
 808:	b8 f7       	brcc	.-18     	; 0x7f8 <eeprom_read_blraw+0x8>
 80a:	08 95       	ret

0000080c <_exit>:
 80c:	f8 94       	cli

0000080e <__stop_program>:
 80e:	ff cf       	rjmp	.-2      	; 0x80e <__stop_program>
