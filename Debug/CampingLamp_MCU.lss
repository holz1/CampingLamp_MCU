
CampingLamp_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000206  00800100  000007fe  000008b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007fe  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000154  00800306  00800306  00000ab8  2**0
                  ALLOC
  3 .eeprom       00000014  00810000  00810000  00000ab8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000afc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000150  00000000  00000000  00000b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000145a  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000882  00000000  00000000  000020e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000006f3  00000000  00000000  00002968  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000314  00000000  00000000  0000305c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000071f  00000000  00000000  00003370  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000093f  00000000  00000000  00003a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000100  00000000  00000000  000043ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_16>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__vector_18>
  4c:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__vector_19>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	36 02       	muls	r19, r22

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	13 e0       	ldi	r17, 0x03	; 3
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	ee ef       	ldi	r30, 0xFE	; 254
  7e:	f7 e0       	ldi	r31, 0x07	; 7
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
  86:	a6 30       	cpi	r26, 0x06	; 6
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	24 e0       	ldi	r18, 0x04	; 4
  8e:	a6 e0       	ldi	r26, 0x06	; 6
  90:	b3 e0       	ldi	r27, 0x03	; 3
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  96:	aa 35       	cpi	r26, 0x5A	; 90
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	c5 e3       	ldi	r28, 0x35	; 53
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	21 97       	sbiw	r28, 0x01	; 1
  a6:	fe 01       	movw	r30, r28
  a8:	0e 94 c1 03 	call	0x782	; 0x782 <__tablejump2__>
  ac:	c4 33       	cpi	r28, 0x34	; 52
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 bc 01 	call	0x378	; 0x378 <main>
  b6:	0c 94 fd 03 	jmp	0x7fa	; 0x7fa <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <_Z13get_key_pressh>:
volatile uint8_t key_rpt;				// key long press and repeat


uint8_t get_key_press( uint8_t key_mask )
{
	cli();								// read and clear atomic !
  be:	f8 94       	cli
	key_mask &= key_press;              // read key(s)
  c0:	90 91 08 03 	lds	r25, 0x0308
  c4:	89 23       	and	r24, r25
	key_press ^= key_mask;              // clear key(s)
  c6:	90 91 08 03 	lds	r25, 0x0308
  ca:	98 27       	eor	r25, r24
  cc:	90 93 08 03 	sts	0x0308, r25
	sei();
  d0:	78 94       	sei
	return key_mask;
}
  d2:	08 95       	ret

000000d4 <_Z11get_key_rpth>:

uint8_t get_key_rpt( uint8_t key_mask )
{
	cli();								// read and clear atomic !
  d4:	f8 94       	cli
	key_mask &= key_rpt;                // read key(s)
  d6:	90 91 06 03 	lds	r25, 0x0306
  da:	89 23       	and	r24, r25
	key_rpt ^= key_mask;                // clear key(s)
  dc:	90 91 06 03 	lds	r25, 0x0306
  e0:	98 27       	eor	r25, r24
  e2:	90 93 06 03 	sts	0x0306, r25
	sei();
  e6:	78 94       	sei
	return key_mask;
}
  e8:	08 95       	ret

000000ea <_Z13get_key_shorth>:

uint8_t get_key_short( uint8_t key_mask )
{
	cli();			// read key state and key press atomic !
  ea:	f8 94       	cli
	return get_key_press( ~key_state & key_mask );
  ec:	90 91 09 03 	lds	r25, 0x0309
  f0:	90 95       	com	r25
  f2:	89 23       	and	r24, r25
  f4:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z13get_key_pressh>
}
  f8:	08 95       	ret

000000fa <_Z15get_key_releaseh>:
	return get_key_press( get_key_rpt( key_mask ));
}

uint8_t get_key_release( uint8_t key_mask )
{
	cli();                     // read and clear atomic !
  fa:	f8 94       	cli
	key_mask &= key_release;   // read key(s)
  fc:	90 91 07 03 	lds	r25, 0x0307
 100:	89 23       	and	r24, r25
	key_release ^= key_mask;   // clear key(s)
 102:	90 91 07 03 	lds	r25, 0x0307
 106:	98 27       	eor	r25, r24
 108:	90 93 07 03 	sts	0x0307, r25
	sei();
 10c:	78 94       	sei
	return key_mask;
}
 10e:	08 95       	ret

00000110 <_Z14get_key_long_rh>:

uint8_t get_key_long_r( uint8_t key_mask )      // if repeat functionality for long press needed
{
  return get_key_press( get_key_rpt( key_press & key_mask ));
 110:	90 91 08 03 	lds	r25, 0x0308
 114:	89 23       	and	r24, r25
 116:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z11get_key_rpth>
 11a:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z13get_key_pressh>
}
 11e:	08 95       	ret

00000120 <_Z13get_key_rpt_lh>:

uint8_t get_key_rpt_l( uint8_t key_mask )       // if long press function with long press repeat functionality needed
{
  return get_key_rpt( ~key_press & key_mask );
 120:	90 91 08 03 	lds	r25, 0x0308
 124:	90 95       	com	r25
 126:	89 23       	and	r24, r25
 128:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z11get_key_rpth>
}
 12c:	08 95       	ret

0000012e <__vector_16>:
int tmp;
int i;
int modus;

ISR(TIMER0_OVF_vect)		// every 10ms for debouncing the switch
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
	static uint8_t ct0, ct1, rpt;
	uint8_t i;

	TCNT0 = (uint8_t)(uint16_t)-(F_CPU / 1024 * 10e-3 + 0.5);	// preload for 10ms
 142:	16 bc       	out	0x26, r1	; 38

	i = key_state ^ ~(KEY_PIN & 0x08);		// key changed ?
 144:	29 b1       	in	r18, 0x09	; 9
 146:	90 91 09 03 	lds	r25, 0x0309
 14a:	28 70       	andi	r18, 0x08	; 8
 14c:	20 95       	com	r18
 14e:	29 27       	eor	r18, r25
	ct0 = ~( ct0 & i );			// reset or count ct0
 150:	80 91 0c 03 	lds	r24, 0x030C
 154:	82 23       	and	r24, r18
 156:	80 95       	com	r24
 158:	80 93 0c 03 	sts	0x030C, r24
	ct1 = ct0 ^ (ct1 & i);		// reset or count ct1
 15c:	90 91 0b 03 	lds	r25, 0x030B
 160:	92 23       	and	r25, r18
 162:	98 27       	eor	r25, r24
 164:	90 93 0b 03 	sts	0x030B, r25
 168:	82 23       	and	r24, r18
	i &= ct0 & ct1;			// count until roll over ?
 16a:	89 23       	and	r24, r25
	key_state ^= i;			// then toggle debounced state
 16c:	90 91 09 03 	lds	r25, 0x0309
 170:	98 27       	eor	r25, r24
 172:	90 93 09 03 	sts	0x0309, r25
	key_press |= key_state & i;		// 0->1: key press detect
 176:	90 91 09 03 	lds	r25, 0x0309
 17a:	20 91 08 03 	lds	r18, 0x0308
 17e:	98 23       	and	r25, r24
 180:	92 2b       	or	r25, r18
 182:	90 93 08 03 	sts	0x0308, r25
	key_release |= ~key_state & i; // 1->0: key release detect
 186:	20 91 09 03 	lds	r18, 0x0309
 18a:	40 91 07 03 	lds	r20, 0x0307
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	20 95       	com	r18
 194:	30 95       	com	r19
 196:	82 23       	and	r24, r18
 198:	93 23       	and	r25, r19
 19a:	84 2b       	or	r24, r20
 19c:	80 93 07 03 	sts	0x0307, r24
	
	if( (key_state & REPEAT_MASK) == 0 )	// check repeat function
 1a0:	80 91 09 03 	lds	r24, 0x0309
 1a4:	83 fd       	sbrc	r24, 3
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <__vector_16+0x82>
	rpt = REPEAT_START;		// start delay
	if( --rpt == 0 ){
 1a8:	81 e3       	ldi	r24, 0x31	; 49
 1aa:	80 93 0a 03 	sts	0x030A, r24
 1ae:	12 c0       	rjmp	.+36     	; 0x1d4 <__vector_16+0xa6>
 1b0:	80 91 0a 03 	lds	r24, 0x030A
 1b4:	81 50       	subi	r24, 0x01	; 1
 1b6:	19 f0       	breq	.+6      	; 0x1be <__vector_16+0x90>
 1b8:	80 93 0a 03 	sts	0x030A, r24
 1bc:	0b c0       	rjmp	.+22     	; 0x1d4 <__vector_16+0xa6>
		rpt = REPEAT_NEXT;			// repeat delay
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 0a 03 	sts	0x030A, r24
		key_rpt |= key_state & REPEAT_MASK;
 1c4:	80 91 09 03 	lds	r24, 0x0309
 1c8:	90 91 06 03 	lds	r25, 0x0306
 1cc:	88 70       	andi	r24, 0x08	; 8
 1ce:	89 2b       	or	r24, r25
 1d0:	80 93 06 03 	sts	0x0306, r24
	}
}
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	4f 91       	pop	r20
 1da:	3f 91       	pop	r19
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <_Z16writeOutGSvaluesP8GSvalues>:

void writeOutGSvalues(GSvalues* GSvalue)
{
 1e8:	0f 93       	push	r16
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	ec 01       	movw	r28, r24
	myChip.setGreyScale(3, logTable_16[GSvalue->coldW1], logTable_16[GSvalue->warmW1], 0x0);
 1f2:	e9 81       	ldd	r30, Y+1	; 0x01
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	ee 0f       	add	r30, r30
 1f8:	ff 1f       	adc	r31, r31
 1fa:	ea 5f       	subi	r30, 0xFA	; 250
 1fc:	fe 4f       	sbci	r31, 0xFE	; 254
 1fe:	20 81       	ld	r18, Z
 200:	31 81       	ldd	r19, Z+1	; 0x01
 202:	e8 81       	ld	r30, Y
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	ee 0f       	add	r30, r30
 208:	ff 1f       	adc	r31, r31
 20a:	ea 5f       	subi	r30, 0xFA	; 250
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
 20e:	40 81       	ld	r20, Z
 210:	51 81       	ldd	r21, Z+1	; 0x01
 212:	00 e0       	ldi	r16, 0x00	; 0
 214:	10 e0       	ldi	r17, 0x00	; 0
 216:	63 e0       	ldi	r22, 0x03	; 3
 218:	8d e1       	ldi	r24, 0x1D	; 29
 21a:	93 e0       	ldi	r25, 0x03	; 3
 21c:	0e 94 1c 03 	call	0x638	; 0x638 <_ZN8TLC5971112setGreyScaleEhjjj>
	myChip.setGreyScale(2, logTable_16[GSvalue->coldW2], logTable_16[GSvalue->warmW2], 0x0);
 220:	eb 81       	ldd	r30, Y+3	; 0x03
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	ee 0f       	add	r30, r30
 226:	ff 1f       	adc	r31, r31
 228:	ea 5f       	subi	r30, 0xFA	; 250
 22a:	fe 4f       	sbci	r31, 0xFE	; 254
 22c:	20 81       	ld	r18, Z
 22e:	31 81       	ldd	r19, Z+1	; 0x01
 230:	ea 81       	ldd	r30, Y+2	; 0x02
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	ee 0f       	add	r30, r30
 236:	ff 1f       	adc	r31, r31
 238:	ea 5f       	subi	r30, 0xFA	; 250
 23a:	fe 4f       	sbci	r31, 0xFE	; 254
 23c:	40 81       	ld	r20, Z
 23e:	51 81       	ldd	r21, Z+1	; 0x01
 240:	62 e0       	ldi	r22, 0x02	; 2
 242:	8d e1       	ldi	r24, 0x1D	; 29
 244:	93 e0       	ldi	r25, 0x03	; 3
 246:	0e 94 1c 03 	call	0x638	; 0x638 <_ZN8TLC5971112setGreyScaleEhjjj>
}
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	1f 91       	pop	r17
 250:	0f 91       	pop	r16
 252:	08 95       	ret

00000254 <_Z11switch_CSeth>:
{
	//One Set of Dimming values is 4 Byte long
	//EEMEM starts with addressing at 0
	//so the first element (Cset = 0) is at 4*CSet = 0 , second at 4*Cset = 4*1 ... usw
	//interrupts should be deactivated during read and write process
	cli();
 254:	f8 94       	cli
	eeprom_read_block (( void *) &actGSvalue , ( const void *)(CSet*4) , 4);
 256:	68 2f       	mov	r22, r24
 258:	70 e0       	ldi	r23, 0x00	; 0
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	66 0f       	add	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	44 e0       	ldi	r20, 0x04	; 4
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0e 94 ed 03 	call	0x7da	; 0x7da <eeprom_read_block>
	writeOutGSvalues(&actGSvalue);
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z16writeOutGSvaluesP8GSvalues>
	sei();
 276:	78 94       	sei
 278:	08 95       	ret

0000027a <_Z14process_switchv>:
}

void process_switch(void)
{
	//Short Press recognized
	if(get_key_short(1<<KEY0))
 27a:	88 e0       	ldi	r24, 0x08	; 8
 27c:	0e 94 75 00 	call	0xea	; 0xea <_Z13get_key_shorth>
 280:	88 23       	and	r24, r24
 282:	91 f0       	breq	.+36     	; 0x2a8 <_Z14process_switchv+0x2e>
	{
		PORTB ^= (1<<PORTB0);
 284:	95 b1       	in	r25, 0x05	; 5
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	89 27       	eor	r24, r25
 28a:	85 b9       	out	0x05, r24	; 5
		CSet++;
 28c:	80 91 55 03 	lds	r24, 0x0355
 290:	8f 5f       	subi	r24, 0xFF	; 255
		if (CSet == NUM_OF_SETS) CSet = 0;
 292:	85 30       	cpi	r24, 0x05	; 5
 294:	19 f0       	breq	.+6      	; 0x29c <_Z14process_switchv+0x22>
{
	//Short Press recognized
	if(get_key_short(1<<KEY0))
	{
		PORTB ^= (1<<PORTB0);
		CSet++;
 296:	80 93 55 03 	sts	0x0355, r24
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <_Z14process_switchv+0x26>
		if (CSet == NUM_OF_SETS) CSet = 0;
 29c:	10 92 55 03 	sts	0x0355, r1
				
		switch_CSet(CSet);
 2a0:	80 91 55 03 	lds	r24, 0x0355
 2a4:	0e 94 2a 01 	call	0x254	; 0x254 <_Z11switch_CSeth>
	}
			
	//long press recognized (needed for correct behaviour of get_key_rpt_l() )
	if( get_key_long_r( 1<<KEY0 ))
 2a8:	88 e0       	ldi	r24, 0x08	; 8
 2aa:	0e 94 88 00 	call	0x110	; 0x110 <_Z14get_key_long_rh>
 2ae:	88 23       	and	r24, r24
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <_Z14process_switchv+0x3a>
		asm("nop");			//do nothing
 2b2:	00 00       	nop

			
	//Pressed an hold -> Dimming called every 50ms
	if(get_key_rpt_l( 1<<KEY0 ))
 2b4:	88 e0       	ldi	r24, 0x08	; 8
 2b6:	0e 94 90 00 	call	0x120	; 0x120 <_Z13get_key_rpt_lh>
 2ba:	88 23       	and	r24, r24
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <_Z14process_switchv+0x46>
 2be:	50 c0       	rjmp	.+160    	; 0x360 <_Z14process_switchv+0xe6>
	{
		//All colors are treated the same
		if(dimm_direc == true) //dimm up
 2c0:	80 91 01 01 	lds	r24, 0x0101
 2c4:	88 23       	and	r24, r24
 2c6:	79 f1       	breq	.+94     	; 0x326 <_Z14process_switchv+0xac>
		{
			//overflow prevention
			if((actGSvalue.coldW1 <= (max_dim_val-DIMM_STEP)) && (actGSvalue.warmW1 <= (max_dim_val-DIMM_STEP)) &&
 2c8:	20 91 02 01 	lds	r18, 0x0102
 2cc:	80 91 00 01 	lds	r24, 0x0100
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	42 2f       	mov	r20, r18
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	84 17       	cp	r24, r20
 2da:	95 07       	cpc	r25, r21
 2dc:	0c f4       	brge	.+2      	; 0x2e0 <_Z14process_switchv+0x66>
 2de:	40 c0       	rjmp	.+128    	; 0x360 <_Z14process_switchv+0xe6>
 2e0:	30 91 03 01 	lds	r19, 0x0103
 2e4:	43 2f       	mov	r20, r19
 2e6:	50 e0       	ldi	r21, 0x00	; 0
 2e8:	84 17       	cp	r24, r20
 2ea:	95 07       	cpc	r25, r21
 2ec:	cc f1       	brlt	.+114    	; 0x360 <_Z14process_switchv+0xe6>
			   (actGSvalue.coldW2 <= (max_dim_val-DIMM_STEP)) && (actGSvalue.warmW2 <= (max_dim_val-DIMM_STEP)))
 2ee:	40 91 04 01 	lds	r20, 0x0104
 2f2:	64 2f       	mov	r22, r20
 2f4:	70 e0       	ldi	r23, 0x00	; 0
	{
		//All colors are treated the same
		if(dimm_direc == true) //dimm up
		{
			//overflow prevention
			if((actGSvalue.coldW1 <= (max_dim_val-DIMM_STEP)) && (actGSvalue.warmW1 <= (max_dim_val-DIMM_STEP)) &&
 2f6:	86 17       	cp	r24, r22
 2f8:	97 07       	cpc	r25, r23
 2fa:	94 f1       	brlt	.+100    	; 0x360 <_Z14process_switchv+0xe6>
			   (actGSvalue.coldW2 <= (max_dim_val-DIMM_STEP)) && (actGSvalue.warmW2 <= (max_dim_val-DIMM_STEP)))
 2fc:	50 91 05 01 	lds	r21, 0x0105
 300:	65 2f       	mov	r22, r21
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	86 17       	cp	r24, r22
 306:	97 07       	cpc	r25, r23
 308:	5c f1       	brlt	.+86     	; 0x360 <_Z14process_switchv+0xe6>
			{
				actGSvalue.coldW1 += DIMM_STEP;
 30a:	e2 e0       	ldi	r30, 0x02	; 2
 30c:	f1 e0       	ldi	r31, 0x01	; 1
 30e:	2f 5f       	subi	r18, 0xFF	; 255
 310:	20 83       	st	Z, r18
				actGSvalue.warmW1 += DIMM_STEP;
 312:	3f 5f       	subi	r19, 0xFF	; 255
 314:	31 83       	std	Z+1, r19	; 0x01
				actGSvalue.coldW2 += DIMM_STEP;
 316:	4f 5f       	subi	r20, 0xFF	; 255
 318:	42 83       	std	Z+2, r20	; 0x02
				actGSvalue.warmW2 += DIMM_STEP;
 31a:	5f 5f       	subi	r21, 0xFF	; 255
 31c:	53 83       	std	Z+3, r21	; 0x03
						
				//write out to chip
				writeOutGSvalues(&actGSvalue);
 31e:	cf 01       	movw	r24, r30
 320:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z16writeOutGSvaluesP8GSvalues>
 324:	1d c0       	rjmp	.+58     	; 0x360 <_Z14process_switchv+0xe6>
			}
		}
		else
		{	//dimm down
			if((actGSvalue.coldW1 >= DIMM_STEP) && (actGSvalue.warmW1 >= DIMM_STEP) &&		//overflow prevention
 326:	80 91 02 01 	lds	r24, 0x0102
 32a:	88 23       	and	r24, r24
 32c:	c9 f0       	breq	.+50     	; 0x360 <_Z14process_switchv+0xe6>
 32e:	90 91 03 01 	lds	r25, 0x0103
 332:	99 23       	and	r25, r25
 334:	a9 f0       	breq	.+42     	; 0x360 <_Z14process_switchv+0xe6>
			   (actGSvalue.coldW2 >= DIMM_STEP) && (actGSvalue.warmW2 >= DIMM_STEP))
 336:	20 91 04 01 	lds	r18, 0x0104
				writeOutGSvalues(&actGSvalue);
			}
		}
		else
		{	//dimm down
			if((actGSvalue.coldW1 >= DIMM_STEP) && (actGSvalue.warmW1 >= DIMM_STEP) &&		//overflow prevention
 33a:	22 23       	and	r18, r18
 33c:	89 f0       	breq	.+34     	; 0x360 <_Z14process_switchv+0xe6>
			   (actGSvalue.coldW2 >= DIMM_STEP) && (actGSvalue.warmW2 >= DIMM_STEP))
 33e:	30 91 05 01 	lds	r19, 0x0105
 342:	33 23       	and	r19, r19
 344:	69 f0       	breq	.+26     	; 0x360 <_Z14process_switchv+0xe6>
			{
				actGSvalue.coldW1 -= DIMM_STEP;
 346:	e2 e0       	ldi	r30, 0x02	; 2
 348:	f1 e0       	ldi	r31, 0x01	; 1
 34a:	81 50       	subi	r24, 0x01	; 1
 34c:	80 83       	st	Z, r24
				actGSvalue.warmW1 -= DIMM_STEP;
 34e:	91 50       	subi	r25, 0x01	; 1
 350:	91 83       	std	Z+1, r25	; 0x01
				actGSvalue.coldW2 -= DIMM_STEP;
 352:	21 50       	subi	r18, 0x01	; 1
 354:	22 83       	std	Z+2, r18	; 0x02
				actGSvalue.warmW2 -= DIMM_STEP;
 356:	31 50       	subi	r19, 0x01	; 1
 358:	33 83       	std	Z+3, r19	; 0x03
						
				//write out to chip
				writeOutGSvalues(&actGSvalue);
 35a:	cf 01       	movw	r24, r30
 35c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z16writeOutGSvaluesP8GSvalues>
			}
		}
	}
			
	if(get_key_release( (1<<KEY0) ))
 360:	88 e0       	ldi	r24, 0x08	; 8
 362:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z15get_key_releaseh>
 366:	88 23       	and	r24, r24
 368:	31 f0       	breq	.+12     	; 0x376 <_Z14process_switchv+0xfc>
	{
		dimm_direc = !dimm_direc;	//toggle dimming direction
 36a:	90 91 01 01 	lds	r25, 0x0101
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	89 27       	eor	r24, r25
 372:	80 93 01 01 	sts	0x0101, r24
 376:	08 95       	ret

00000378 <main>:
	//BTM222 Reset Configuration (not needed because of internal Pullup of the BTM222)
	/*DDRB |= (1<<PB1);
	PORTB |= (1<<PB1);		//high -> no Reset
	PORTB &= ~(1<<PB1);		//low  -> Reset   */

	SPI_init();
 378:	0e 94 41 02 	call	0x482	; 0x482 <_Z8SPI_initv>
	USART_Init(BAUDRATE);
 37c:	83 e3       	ldi	r24, 0x33	; 51
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 4a 03 	call	0x694	; 0x694 <_Z10USART_Initj>


	//Configuration Timer0 (used for debouncing)
	TCCR0B = (1<<CS02)|(1<<CS00);	// divide by 1024
 384:	85 e0       	ldi	r24, 0x05	; 5
 386:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << TOIE0);			// enable timer interrupt
 388:	ee e6       	ldi	r30, 0x6E	; 110
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	81 60       	ori	r24, 0x01	; 1
 390:	80 83       	st	Z, r24
	
	DDRB  |= (1 << PORTB0 );		//PB0 is output (LED)
 392:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= (1 <<PORTB0);			//Switch LED on
 394:	28 9a       	sbi	0x05, 0	; 5
		
	PORTD |= (1<<PORTD3);			//Activate Pullups for PD3 (Switch)
 396:	5b 9a       	sbi	0x0b, 3	; 11
	
	switch_CSet(CSet);				//Color set 0 ist default at startup
 398:	80 91 55 03 	lds	r24, 0x0355
 39c:	0e 94 2a 01 	call	0x254	; 0x254 <_Z11switch_CSeth>
	
	sei();							//Enable Global Interrups (for USART)
 3a0:	78 94       	sei
 3a2:	0f 2e       	mov	r0, r31
 3a4:	f3 e1       	ldi	r31, 0x13	; 19
 3a6:	ef 2e       	mov	r14, r31
 3a8:	f3 e0       	ldi	r31, 0x03	; 3
 3aa:	ff 2e       	mov	r15, r31
 3ac:	f0 2d       	mov	r31, r0
 3ae:	cc e1       	ldi	r28, 0x1C	; 28
 3b0:	d3 e0       	ldi	r29, 0x03	; 3
 3b2:	ae 2c       	mov	r10, r14
 3b4:	bf 2c       	mov	r11, r15
				}
				
				string[i] =  '\0';
				
				val = atoi(string);
				val = faktor*val;
 3b6:	cc 24       	eor	r12, r12
 3b8:	c3 94       	inc	r12
 3ba:	dc 2c       	mov	r13, r12
	
	
    while (1) 
    {
			
		process_switch();			//collects the polling information from the button
 3bc:	0e 94 3d 01 	call	0x27a	; 0x27a <_Z14process_switchv>
		
		if (DataInReceiveBuffer())
 3c0:	0e 94 b8 03 	call	0x770	; 0x770 <_Z19DataInReceiveBufferv>
 3c4:	88 23       	and	r24, r24
 3c6:	d1 f3       	breq	.-12     	; 0x3bc <main+0x44>
 3c8:	ea 2d       	mov	r30, r10
 3ca:	fb 2d       	mov	r31, r11
		{
			for (int a = 0 ; a<9 ; a++)
			{
				string[a] = 0;
 3cc:	11 92       	st	Z+, r1
			
		process_switch();			//collects the polling information from the button
		
		if (DataInReceiveBuffer())
		{
			for (int a = 0 ; a<9 ; a++)
 3ce:	ec 17       	cp	r30, r28
 3d0:	fd 07       	cpc	r31, r29
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <main+0x54>
			{
				string[a] = 0;
			}
			
			if(USART_Receive() == 'a')
 3d4:	0e 94 a7 03 	call	0x74e	; 0x74e <_Z13USART_Receivev>
 3d8:	81 36       	cpi	r24, 0x61	; 97
 3da:	81 f7       	brne	.-32     	; 0x3bc <main+0x44>
			{
				USART_Receive();	//space
 3dc:	0e 94 a7 03 	call	0x74e	; 0x74e <_Z13USART_Receivev>
				i = 0;
 3e0:	10 92 0e 03 	sts	0x030E, r1
 3e4:	10 92 0d 03 	sts	0x030D, r1
				tmp = 0;
 3e8:	10 92 10 03 	sts	0x0310, r1
 3ec:	10 92 0f 03 	sts	0x030F, r1
				while(tmp != '\n')
				{
					tmp = USART_Receive();
 3f0:	0e 94 a7 03 	call	0x74e	; 0x74e <_Z13USART_Receivev>
 3f4:	48 2f       	mov	r20, r24
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	50 93 10 03 	sts	0x0310, r21
 3fc:	40 93 0f 03 	sts	0x030F, r20
					string[i] = tmp;	
 400:	20 91 0d 03 	lds	r18, 0x030D
 404:	30 91 0e 03 	lds	r19, 0x030E
 408:	f9 01       	movw	r30, r18
 40a:	ed 5e       	subi	r30, 0xED	; 237
 40c:	fc 4f       	sbci	r31, 0xFC	; 252
 40e:	80 83       	st	Z, r24
					i++;
 410:	2f 5f       	subi	r18, 0xFF	; 255
 412:	3f 4f       	sbci	r19, 0xFF	; 255
 414:	30 93 0e 03 	sts	0x030E, r19
 418:	20 93 0d 03 	sts	0x030D, r18
			if(USART_Receive() == 'a')
			{
				USART_Receive();	//space
				i = 0;
				tmp = 0;
				while(tmp != '\n')
 41c:	4a 30       	cpi	r20, 0x0A	; 10
 41e:	51 05       	cpc	r21, r1
 420:	39 f7       	brne	.-50     	; 0x3f0 <main+0x78>
					tmp = USART_Receive();
					string[i] = tmp;	
					i++;
				}
				
				string[i] =  '\0';
 422:	f9 01       	movw	r30, r18
 424:	ed 5e       	subi	r30, 0xED	; 237
 426:	fc 4f       	sbci	r31, 0xFC	; 252
 428:	10 82       	st	Z, r1
				
				val = atoi(string);
 42a:	c7 01       	movw	r24, r14
 42c:	0e 94 c7 03 	call	0x78e	; 0x78e <atoi>
				val = faktor*val;
 430:	8c 9d       	mul	r24, r12
 432:	a0 01       	movw	r20, r0
 434:	8d 9d       	mul	r24, r13
 436:	50 0d       	add	r21, r0
 438:	9c 9d       	mul	r25, r12
 43a:	50 0d       	add	r21, r0
 43c:	11 24       	eor	r1, r1
 43e:	50 93 12 03 	sts	0x0312, r21
 442:	40 93 11 03 	sts	0x0311, r20
				
				myChip.setGreyScale(3, val, val, val);
 446:	8a 01       	movw	r16, r20
 448:	9a 01       	movw	r18, r20
 44a:	63 e0       	ldi	r22, 0x03	; 3
 44c:	8d e1       	ldi	r24, 0x1D	; 29
 44e:	93 e0       	ldi	r25, 0x03	; 3
 450:	0e 94 1c 03 	call	0x638	; 0x638 <_ZN8TLC5971112setGreyScaleEhjjj>
				myChip.setGreyScale(2, val, val, val);
 454:	40 91 11 03 	lds	r20, 0x0311
 458:	50 91 12 03 	lds	r21, 0x0312
 45c:	8a 01       	movw	r16, r20
 45e:	9a 01       	movw	r18, r20
 460:	62 e0       	ldi	r22, 0x02	; 2
 462:	8d e1       	ldi	r24, 0x1D	; 29
 464:	93 e0       	ldi	r25, 0x03	; 3
 466:	0e 94 1c 03 	call	0x638	; 0x638 <_ZN8TLC5971112setGreyScaleEhjjj>
 46a:	a8 cf       	rjmp	.-176    	; 0x3bc <main+0x44>

0000046c <_GLOBAL__sub_I_GScSets>:
			}
		}
	}
		
}
 46c:	0f 93       	push	r16
uint8_t max_dim_val = SET_MAX_DIM_VAL;




TLC59711 myChip;
 46e:	01 e0       	ldi	r16, 0x01	; 1
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	40 e0       	ldi	r20, 0x00	; 0
 474:	61 e0       	ldi	r22, 0x01	; 1
 476:	8d e1       	ldi	r24, 0x1D	; 29
 478:	93 e0       	ldi	r25, 0x03	; 3
 47a:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <_ZN8TLC59711C1Ebbbb>
				myChip.setGreyScale(2, val, val, val);
			}
		}
	}
		
}
 47e:	0f 91       	pop	r16
 480:	08 95       	ret

00000482 <_Z8SPI_initv>:
#include "spi.h"

void SPI_init(void)
{
	/* Set MOSI and SCK output, all others input */
	DDRB = (1<<PB3)|(1<<PB5)|(1<<PB2);		//DDRB The Port B Data Direction Register (1 = Output)
 482:	8c e2       	ldi	r24, 0x2C	; 44
 484:	84 b9       	out	0x04, r24	; 4
	// PB3 = 3 = MOSI ; PB5 = 5 = SCK ; PB2 = SS
	
	/* Enable SPI, set Master, set clock rate fclk/4 */
	SPCR = (1<<SPE)|(1<<MSTR)|(0<<SPR0);
 486:	80 e5       	ldi	r24, 0x50	; 80
 488:	8c bd       	out	0x2c, r24	; 44
	
	//Set SS to high (not active)
	PORTB |= (1 << PB2);
 48a:	2a 9a       	sbi	0x05, 2	; 5
 48c:	08 95       	ret

0000048e <_Z15SPI_transfairnbPhi>:


void SPI_transfairnb(uint8_t* cData, int len)
{
	/* Start transmission */
	PORTB &= ~(1<<PB2);								// set SS to low
 48e:	2a 98       	cbi	0x05, 2	; 5
	
	for (int i = 0 ; i < len ; i++)
 490:	16 16       	cp	r1, r22
 492:	17 06       	cpc	r1, r23
 494:	7c f4       	brge	.+30     	; 0x4b4 <_Z15SPI_transfairnbPhi+0x26>
 496:	fc 01       	movw	r30, r24
 498:	68 0f       	add	r22, r24
 49a:	79 1f       	adc	r23, r25
 49c:	df 01       	movw	r26, r30
	{
		SPDR = *(cData + i);						//SPDR = SPI Data Register
 49e:	90 81       	ld	r25, Z
 4a0:	9e bd       	out	0x2e, r25	; 46
		
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));					// SPIF = SPI Interrupt Flag, gets set if the transmit is completed
 4a2:	0d b4       	in	r0, 0x2d	; 45
 4a4:	07 fe       	sbrs	r0, 7
 4a6:	fd cf       	rjmp	.-6      	; 0x4a2 <_Z15SPI_transfairnbPhi+0x14>
		*(cData + i) = SPDR;						// cleared by first reading the SPI Status Register with SPIF set, then accessing the SPDR
 4a8:	9e b5       	in	r25, 0x2e	; 46
 4aa:	9c 93       	st	X, r25
 4ac:	31 96       	adiw	r30, 0x01	; 1
void SPI_transfairnb(uint8_t* cData, int len)
{
	/* Start transmission */
	PORTB &= ~(1<<PB2);								// set SS to low
	
	for (int i = 0 ; i < len ; i++)
 4ae:	e6 17       	cp	r30, r22
 4b0:	f7 07       	cpc	r31, r23
 4b2:	a1 f7       	brne	.-24     	; 0x49c <_Z15SPI_transfairnbPhi+0xe>
		/* Wait for transmission complete */
		while(!(SPSR & (1<<SPIF)));					// SPIF = SPI Interrupt Flag, gets set if the transmit is completed
		*(cData + i) = SPDR;						// cleared by first reading the SPI Status Register with SPIF set, then accessing the SPDR
	}
	
	PORTB |= (1<<PB2);								// set SS to high
 4b4:	2a 9a       	sbi	0x05, 2	; 5
 4b6:	08 95       	ret

000004b8 <_ZN8TLC59711C1Ebbbb>:
#endif

#include "TLC59711.h"
#include <util/delay.h>

TLC59711::TLC59711(bool OUTMMG,
 4b8:	0f 93       	push	r16
 4ba:	dc 01       	movw	r26, r24
                   bool EXTGCK,
                   bool TMGRST,
                   bool DSPRPT) 
{
    control_data.write_cmd = 0x25;
 4bc:	8c 91       	ld	r24, X
 4be:	80 7c       	andi	r24, 0xC0	; 192
    
    control_data.OUTMMG = OUTMMG;
 4c0:	85 62       	ori	r24, 0x25	; 37
 4c2:	60 fb       	bst	r22, 0
 4c4:	86 f9       	bld	r24, 6
    control_data.EXTGCK = EXTGCK;
 4c6:	40 fb       	bst	r20, 0
 4c8:	87 f9       	bld	r24, 7
 4ca:	8c 93       	st	X, r24
    control_data.TMGRST = TMGRST;
 4cc:	11 96       	adiw	r26, 0x01	; 1
 4ce:	8c 91       	ld	r24, X
 4d0:	11 97       	sbiw	r26, 0x01	; 1
 4d2:	20 fb       	bst	r18, 0
 4d4:	80 f9       	bld	r24, 0
    control_data.DSPRPT = DSPRPT;
 4d6:	00 fb       	bst	r16, 0
 4d8:	81 f9       	bld	r24, 1
    control_data.BLANK  = false;
 4da:	83 70       	andi	r24, 0x03	; 3
    
    //Global Brightnes control -> all high (7Bit)
    control_data.BCr = 0x7F;
    control_data.BCg = 0x7F;
 4dc:	9f ef       	ldi	r25, 0xFF	; 255
 4de:	13 96       	adiw	r26, 0x03	; 3
 4e0:	9c 93       	st	X, r25
 4e2:	13 97       	sbiw	r26, 0x03	; 3
    control_data.BCb = 0x7F;
 4e4:	88 6f       	ori	r24, 0xF8	; 248
 4e6:	11 96       	adiw	r26, 0x01	; 1
 4e8:	8c 93       	st	X, r24
 4ea:	11 97       	sbiw	r26, 0x01	; 1
 4ec:	12 96       	adiw	r26, 0x02	; 2
 4ee:	9c 93       	st	X, r25
 4f0:	12 97       	sbiw	r26, 0x02	; 2
 4f2:	fd 01       	movw	r30, r26
 4f4:	34 96       	adiw	r30, 0x04	; 4
 4f6:	cd 01       	movw	r24, r26
 4f8:	4c 96       	adiw	r24, 0x1c	; 28

    
    //Greyscale control 12 Channels -> all low
    for (int i = 0 ; i <12 ; i++)
    {
        GS[i]  = 0;
 4fa:	11 92       	st	Z+, r1
 4fc:	11 92       	st	Z+, r1
    control_data.BCg = 0x7F;
    control_data.BCb = 0x7F;

    
    //Greyscale control 12 Channels -> all low
    for (int i = 0 ; i <12 ; i++)
 4fe:	e8 17       	cp	r30, r24
 500:	f9 07       	cpc	r31, r25
 502:	d9 f7       	brne	.-10     	; 0x4fa <_ZN8TLC59711C1Ebbbb+0x42>
    {
        GS[i]  = 0;
    }
}
 504:	0f 91       	pop	r16
 506:	08 95       	ret

00000508 <_ZN8TLC5971113write_to_chipEv>:
    }
    write_to_chip();
}

void TLC59711::write_to_chip()
{
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	ac 01       	movw	r20, r24

    //Flags
    m_buffer[0] = (control_data.write_cmd << 2) | (control_data.OUTMMG << 1) | control_data.EXTGCK;
 50e:	dc 01       	movw	r26, r24
 510:	8c 91       	ld	r24, X
 512:	98 2f       	mov	r25, r24
 514:	99 0f       	add	r25, r25
 516:	99 0f       	add	r25, r25
 518:	86 fb       	bst	r24, 6
 51a:	22 27       	eor	r18, r18
 51c:	20 f9       	bld	r18, 0
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	22 0f       	add	r18, r18
 522:	33 1f       	adc	r19, r19
 524:	29 2b       	or	r18, r25
 526:	87 fb       	bst	r24, 7
 528:	99 27       	eor	r25, r25
 52a:	90 f9       	bld	r25, 0
 52c:	82 2f       	mov	r24, r18
 52e:	89 2b       	or	r24, r25
 530:	5c 96       	adiw	r26, 0x1c	; 28
 532:	8c 93       	st	X, r24
 534:	5c 97       	sbiw	r26, 0x1c	; 28
    m_buffer[1] = (control_data.TMGRST << 7)    | (control_data.DSPRPT << 6) | (control_data.BLANK << 5);

    //Global brightness - BC
    m_buffer[1] |= control_data.BCb >> 2;
 536:	11 96       	adiw	r26, 0x01	; 1
 538:	8c 91       	ld	r24, X
 53a:	11 97       	sbiw	r26, 0x01	; 1
 53c:	98 2f       	mov	r25, r24
 53e:	96 95       	lsr	r25
 540:	96 95       	lsr	r25
 542:	96 95       	lsr	r25
 544:	12 96       	adiw	r26, 0x02	; 2
 546:	2c 91       	ld	r18, X
 548:	62 2f       	mov	r22, r18
 54a:	63 70       	andi	r22, 0x03	; 3
 54c:	62 95       	swap	r22
 54e:	66 0f       	add	r22, r22
 550:	60 7e       	andi	r22, 0xE0	; 224
 552:	69 2b       	or	r22, r25
 554:	70 e0       	ldi	r23, 0x00	; 0
void TLC59711::write_to_chip()
{

    //Flags
    m_buffer[0] = (control_data.write_cmd << 2) | (control_data.OUTMMG << 1) | control_data.EXTGCK;
    m_buffer[1] = (control_data.TMGRST << 7)    | (control_data.DSPRPT << 6) | (control_data.BLANK << 5);
 556:	81 fb       	bst	r24, 1
 558:	aa 27       	eor	r26, r26
 55a:	a0 f9       	bld	r26, 0
 55c:	b0 e0       	ldi	r27, 0x00	; 0
 55e:	00 24       	eor	r0, r0
 560:	b6 95       	lsr	r27
 562:	a7 95       	ror	r26
 564:	07 94       	ror	r0
 566:	b6 95       	lsr	r27
 568:	a7 95       	ror	r26
 56a:	07 94       	ror	r0
 56c:	ba 2f       	mov	r27, r26
 56e:	a0 2d       	mov	r26, r0
 570:	98 2f       	mov	r25, r24
 572:	97 95       	ror	r25
 574:	99 27       	eor	r25, r25
 576:	97 95       	ror	r25
 578:	a9 2b       	or	r26, r25
 57a:	82 fb       	bst	r24, 2
 57c:	ee 27       	eor	r30, r30
 57e:	e0 f9       	bld	r30, 0
 580:	f0 e0       	ldi	r31, 0x00	; 0
 582:	ee 0f       	add	r30, r30
 584:	ff 1f       	adc	r31, r31
 586:	e2 95       	swap	r30
 588:	f2 95       	swap	r31
 58a:	f0 7f       	andi	r31, 0xF0	; 240
 58c:	fe 27       	eor	r31, r30
 58e:	e0 7f       	andi	r30, 0xF0	; 240
 590:	fe 27       	eor	r31, r30
 592:	ea 2b       	or	r30, r26

    //Global brightness - BC
    m_buffer[1] |= control_data.BCb >> 2;
 594:	cb 01       	movw	r24, r22
 596:	95 95       	asr	r25
 598:	87 95       	ror	r24
 59a:	95 95       	asr	r25
 59c:	87 95       	ror	r24
 59e:	e8 2b       	or	r30, r24
 5a0:	da 01       	movw	r26, r20
 5a2:	5d 96       	adiw	r26, 0x1d	; 29
 5a4:	ec 93       	st	X, r30
 5a6:	5d 97       	sbiw	r26, 0x1d	; 29
    m_buffer[2] = (control_data.BCb << 6) | control_data.BCg >> 1;
 5a8:	82 2f       	mov	r24, r18
 5aa:	86 95       	lsr	r24
 5ac:	86 95       	lsr	r24
 5ae:	13 96       	adiw	r26, 0x03	; 3
 5b0:	ec 91       	ld	r30, X
 5b2:	13 97       	sbiw	r26, 0x03	; 3
 5b4:	2e 2f       	mov	r18, r30
 5b6:	21 70       	andi	r18, 0x01	; 1
 5b8:	22 95       	swap	r18
 5ba:	22 0f       	add	r18, r18
 5bc:	22 0f       	add	r18, r18
 5be:	20 7c       	andi	r18, 0xC0	; 192
 5c0:	92 2f       	mov	r25, r18
 5c2:	98 2b       	or	r25, r24
 5c4:	29 2f       	mov	r18, r25
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	c9 01       	movw	r24, r18
 5ca:	95 95       	asr	r25
 5cc:	87 95       	ror	r24
 5ce:	00 24       	eor	r0, r0
 5d0:	76 95       	lsr	r23
 5d2:	67 95       	ror	r22
 5d4:	07 94       	ror	r0
 5d6:	76 95       	lsr	r23
 5d8:	67 95       	ror	r22
 5da:	07 94       	ror	r0
 5dc:	76 2f       	mov	r23, r22
 5de:	60 2d       	mov	r22, r0
 5e0:	68 2b       	or	r22, r24
 5e2:	5e 96       	adiw	r26, 0x1e	; 30
 5e4:	6c 93       	st	X, r22
 5e6:	5e 97       	sbiw	r26, 0x1e	; 30
    m_buffer[3] =  control_data.BCg << 7  | control_data.BCr;
 5e8:	36 95       	lsr	r19
 5ea:	32 2f       	mov	r19, r18
 5ec:	22 27       	eor	r18, r18
 5ee:	37 95       	ror	r19
 5f0:	27 95       	ror	r18
 5f2:	e6 95       	lsr	r30
 5f4:	2e 2b       	or	r18, r30
 5f6:	5f 96       	adiw	r26, 0x1f	; 31
 5f8:	2c 93       	st	X, r18
 5fa:	5f 97       	sbiw	r26, 0x1f	; 31
 5fc:	fa 01       	movw	r30, r20
 5fe:	7c 96       	adiw	r30, 0x1c	; 28
 600:	91 96       	adiw	r26, 0x21	; 33
 602:	ba 01       	movw	r22, r20
 604:	6c 5f       	subi	r22, 0xFC	; 252
 606:	7f 4f       	sbci	r23, 0xFF	; 255
 608:	32 97       	sbiw	r30, 0x02	; 2
    
    //Greyscale - GS
    int a = 11;
    for (int i = 4 ; i < 28 ; i = i+2)
    {
        m_buffer[i] = GS[a] >> 8;
 60a:	90 81       	ld	r25, Z
 60c:	21 81       	ldd	r18, Z+1	; 0x01
 60e:	ed 01       	movw	r28, r26
 610:	21 97       	sbiw	r28, 0x01	; 1
 612:	28 83       	st	Y, r18
        m_buffer[i+1] = (GS[a]<< 8) >> 8;
 614:	9c 93       	st	X, r25
 616:	12 96       	adiw	r26, 0x02	; 2
    m_buffer[2] = (control_data.BCb << 6) | control_data.BCg >> 1;
    m_buffer[3] =  control_data.BCg << 7  | control_data.BCr;
    
    //Greyscale - GS
    int a = 11;
    for (int i = 4 ; i < 28 ; i = i+2)
 618:	e6 17       	cp	r30, r22
 61a:	f7 07       	cpc	r31, r23
 61c:	a9 f7       	brne	.-22     	; 0x608 <_ZN8TLC5971113write_to_chipEv+0x100>
        m_buffer[i] = GS[a] >> 8;
        m_buffer[i+1] = (GS[a]<< 8) >> 8;
        a--;
    }
	
	SPI_transfairnb(m_buffer, 28);
 61e:	6c e1       	ldi	r22, 0x1C	; 28
 620:	70 e0       	ldi	r23, 0x00	; 0
 622:	ca 01       	movw	r24, r20
 624:	4c 96       	adiw	r24, 0x1c	; 28
 626:	0e 94 47 02 	call	0x48e	; 0x48e <_Z15SPI_transfairnbPhi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 62a:	b5 e3       	ldi	r27, 0x35	; 53
 62c:	ba 95       	dec	r27
 62e:	f1 f7       	brne	.-4      	; 0x62c <_ZN8TLC5971113write_to_chipEv+0x124>
 630:	00 00       	nop
//    //Greyscale - GS
//    for (int i = 2 ; i < 14 ; i++)
//    {
//        m_buffer[i] = GS[i-2];
//    }
}
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	08 95       	ret

00000638 <_ZN8TLC5971112setGreyScaleEhjjj>:
    //bcm2835_close();
//}


void TLC59711::setGreyScale(uint8_t RGBgroup, uint16_t GSr, uint16_t GSg, uint16_t GSb)
{
 638:	0f 93       	push	r16
 63a:	1f 93       	push	r17
    switch(RGBgroup)
 63c:	61 30       	cpi	r22, 0x01	; 1
 63e:	71 f0       	breq	.+28     	; 0x65c <_ZN8TLC5971112setGreyScaleEhjjj+0x24>
 640:	28 f0       	brcs	.+10     	; 0x64c <_ZN8TLC5971112setGreyScaleEhjjj+0x14>
 642:	62 30       	cpi	r22, 0x02	; 2
 644:	99 f0       	breq	.+38     	; 0x66c <_ZN8TLC5971112setGreyScaleEhjjj+0x34>
 646:	63 30       	cpi	r22, 0x03	; 3
 648:	c9 f0       	breq	.+50     	; 0x67c <_ZN8TLC5971112setGreyScaleEhjjj+0x44>
 64a:	1f c0       	rjmp	.+62     	; 0x68a <_ZN8TLC5971112setGreyScaleEhjjj+0x52>
    {
        case 0:
            GS[0]  = GSb;
 64c:	fc 01       	movw	r30, r24
 64e:	15 83       	std	Z+5, r17	; 0x05
 650:	04 83       	std	Z+4, r16	; 0x04
            GS[1]  = GSg;
 652:	37 83       	std	Z+7, r19	; 0x07
 654:	26 83       	std	Z+6, r18	; 0x06
            GS[2]  = GSr;
 656:	51 87       	std	Z+9, r21	; 0x09
 658:	40 87       	std	Z+8, r20	; 0x08
            break;
 65a:	17 c0       	rjmp	.+46     	; 0x68a <_ZN8TLC5971112setGreyScaleEhjjj+0x52>
        case 1:
            GS[3]  = GSb;
 65c:	fc 01       	movw	r30, r24
 65e:	13 87       	std	Z+11, r17	; 0x0b
 660:	02 87       	std	Z+10, r16	; 0x0a
            GS[4]  = GSg;
 662:	35 87       	std	Z+13, r19	; 0x0d
 664:	24 87       	std	Z+12, r18	; 0x0c
            GS[5]  = GSr;
 666:	57 87       	std	Z+15, r21	; 0x0f
 668:	46 87       	std	Z+14, r20	; 0x0e
            break;
 66a:	0f c0       	rjmp	.+30     	; 0x68a <_ZN8TLC5971112setGreyScaleEhjjj+0x52>
        case 2:
            GS[6]  = GSb;
 66c:	fc 01       	movw	r30, r24
 66e:	11 8b       	std	Z+17, r17	; 0x11
 670:	00 8b       	std	Z+16, r16	; 0x10
            GS[7]  = GSg;
 672:	33 8b       	std	Z+19, r19	; 0x13
 674:	22 8b       	std	Z+18, r18	; 0x12
            GS[8]  = GSr;
 676:	55 8b       	std	Z+21, r21	; 0x15
 678:	44 8b       	std	Z+20, r20	; 0x14
            break;
 67a:	07 c0       	rjmp	.+14     	; 0x68a <_ZN8TLC5971112setGreyScaleEhjjj+0x52>
        case 3:
            GS[9]  = GSb;
 67c:	fc 01       	movw	r30, r24
 67e:	17 8b       	std	Z+23, r17	; 0x17
 680:	06 8b       	std	Z+22, r16	; 0x16
            GS[10] = GSg;
 682:	31 8f       	std	Z+25, r19	; 0x19
 684:	20 8f       	std	Z+24, r18	; 0x18
            GS[11] = GSr;
 686:	53 8f       	std	Z+27, r21	; 0x1b
 688:	42 8f       	std	Z+26, r20	; 0x1a
            break;
        default:
            break;
    }
    write_to_chip();
 68a:	0e 94 84 02 	call	0x508	; 0x508 <_ZN8TLC5971113write_to_chipEv>
}
 68e:	1f 91       	pop	r17
 690:	0f 91       	pop	r16
 692:	08 95       	ret

00000694 <_Z10USART_Initj>:
void USART_Init( unsigned int baudrate )
{
	unsigned char x;

	/* Set the baud rate */
	UBRR0H = (unsigned char) (baudrate>>8);                  
 694:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) baudrate;
 698:	80 93 c4 00 	sts	0x00C4, r24
	
	/* Enable UART receiver and transmitter */
	UCSR0B = ( ( 1 << RXCIE0 ) | ( 1 << RXEN0 ) | ( 1 << TXEN0 ) ); 
 69c:	88 e9       	ldi	r24, 0x98	; 152
 69e:	80 93 c1 00 	sts	0x00C1, r24
	
	/* Set frame format: 8 data, no parity, 1 stop */
	//UCSR0C = (1<<URSEL)|(0<<USBS)|(1<<UCSZ1)|(1<<UCSZ0); for atmega8
	
	/* Set frame format: 8 data, no parity, 1 stop */
	UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);
 6a2:	86 e0       	ldi	r24, 0x06	; 6
 6a4:	80 93 c2 00 	sts	0x00C2, r24
	
	
	/* Flush receive buffer */
	x = 0; 			    

	USART_RxTail = x;
 6a8:	10 92 d8 03 	sts	0x03D8, r1
	USART_RxHead = x;
 6ac:	10 92 d9 03 	sts	0x03D9, r1
	USART_TxTail = x;
 6b0:	10 92 56 03 	sts	0x0356, r1
	USART_TxHead = x;
 6b4:	10 92 57 03 	sts	0x0357, r1
 6b8:	08 95       	ret

000006ba <__vector_18>:
}

/* Interrupt handlers */
ISR(USART_RX_vect)
{
 6ba:	1f 92       	push	r1
 6bc:	0f 92       	push	r0
 6be:	0f b6       	in	r0, 0x3f	; 63
 6c0:	0f 92       	push	r0
 6c2:	11 24       	eor	r1, r1
 6c4:	8f 93       	push	r24
 6c6:	9f 93       	push	r25
 6c8:	ef 93       	push	r30
 6ca:	ff 93       	push	r31
	
	unsigned char data;
	unsigned char tmphead;

	/* Read the received data */
	data = UDR0;                 
 6cc:	80 91 c6 00 	lds	r24, 0x00C6
	/* Calculate buffer index */
	tmphead = ( USART_RxHead + 1 ) & USART_RX_BUFFER_MASK;
 6d0:	e0 91 d9 03 	lds	r30, 0x03D9
 6d4:	ef 5f       	subi	r30, 0xFF	; 255
 6d6:	ef 77       	andi	r30, 0x7F	; 127
	USART_RxHead = tmphead;      /* Store new index */
 6d8:	e0 93 d9 03 	sts	0x03D9, r30

	if ( tmphead == USART_RxTail )
 6dc:	90 91 d8 03 	lds	r25, 0x03D8
	{
		/* ERROR! Receive buffer overflow */
	}
	
	USART_RxBuf[tmphead] = data; /* Store received data in buffer */
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	e6 52       	subi	r30, 0x26	; 38
 6e4:	fc 4f       	sbci	r31, 0xFC	; 252
 6e6:	80 83       	st	Z, r24
}
 6e8:	ff 91       	pop	r31
 6ea:	ef 91       	pop	r30
 6ec:	9f 91       	pop	r25
 6ee:	8f 91       	pop	r24
 6f0:	0f 90       	pop	r0
 6f2:	0f be       	out	0x3f, r0	; 63
 6f4:	0f 90       	pop	r0
 6f6:	1f 90       	pop	r1
 6f8:	18 95       	reti

000006fa <__vector_19>:

ISR(USART_UDRE_vect)
{
 6fa:	1f 92       	push	r1
 6fc:	0f 92       	push	r0
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	0f 92       	push	r0
 702:	11 24       	eor	r1, r1
 704:	8f 93       	push	r24
 706:	9f 93       	push	r25
 708:	ef 93       	push	r30
 70a:	ff 93       	push	r31
	unsigned char tmptail;

	/* Check if all data is transmitted */
	if ( USART_TxHead != USART_TxTail )
 70c:	90 91 57 03 	lds	r25, 0x0357
 710:	80 91 56 03 	lds	r24, 0x0356
 714:	98 17       	cp	r25, r24
 716:	69 f0       	breq	.+26     	; 0x732 <__vector_19+0x38>
	{
		/* Calculate buffer index */
		tmptail = ( USART_TxTail + 1 ) & USART_TX_BUFFER_MASK;
 718:	e0 91 56 03 	lds	r30, 0x0356
 71c:	ef 5f       	subi	r30, 0xFF	; 255
 71e:	ef 77       	andi	r30, 0x7F	; 127
		USART_TxTail = tmptail;      /* Store new index */
 720:	e0 93 56 03 	sts	0x0356, r30
	
		UDR0 = USART_TxBuf[tmptail];  /* Start transmition */
 724:	f0 e0       	ldi	r31, 0x00	; 0
 726:	e8 5a       	subi	r30, 0xA8	; 168
 728:	fc 4f       	sbci	r31, 0xFC	; 252
 72a:	80 81       	ld	r24, Z
 72c:	80 93 c6 00 	sts	0x00C6, r24
 730:	05 c0       	rjmp	.+10     	; 0x73c <__vector_19+0x42>
	}
	else
	{
		UCSR0B &= ~(1<<UDRIE0);         /* Disable UDRE interrupt */
 732:	e1 ec       	ldi	r30, 0xC1	; 193
 734:	f0 e0       	ldi	r31, 0x00	; 0
 736:	80 81       	ld	r24, Z
 738:	8f 7d       	andi	r24, 0xDF	; 223
 73a:	80 83       	st	Z, r24
	}
}
 73c:	ff 91       	pop	r31
 73e:	ef 91       	pop	r30
 740:	9f 91       	pop	r25
 742:	8f 91       	pop	r24
 744:	0f 90       	pop	r0
 746:	0f be       	out	0x3f, r0	; 63
 748:	0f 90       	pop	r0
 74a:	1f 90       	pop	r1
 74c:	18 95       	reti

0000074e <_Z13USART_Receivev>:
/* Read and write functions */
unsigned char USART_Receive( void )
{
	unsigned char tmptail;
	
	while ( USART_RxHead == USART_RxTail );  /* Wait for incomming data */
 74e:	90 91 d9 03 	lds	r25, 0x03D9
 752:	80 91 d8 03 	lds	r24, 0x03D8
 756:	98 17       	cp	r25, r24
 758:	d1 f3       	breq	.-12     	; 0x74e <_Z13USART_Receivev>
		
	tmptail = ( USART_RxTail + 1 ) & USART_RX_BUFFER_MASK;/* Calculate buffer index */
 75a:	e0 91 d8 03 	lds	r30, 0x03D8
 75e:	ef 5f       	subi	r30, 0xFF	; 255
 760:	ef 77       	andi	r30, 0x7F	; 127
	
	USART_RxTail = tmptail;                /* Store new index */
 762:	e0 93 d8 03 	sts	0x03D8, r30
	
	return USART_RxBuf[tmptail];  /* Return data */
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	e6 52       	subi	r30, 0x26	; 38
 76a:	fc 4f       	sbci	r31, 0xFC	; 252
}
 76c:	80 81       	ld	r24, Z
 76e:	08 95       	ret

00000770 <_Z19DataInReceiveBufferv>:
	UCSR0B |= (1<<UDRIE0);                    /* Enable UDRE interrupt */
}

unsigned char DataInReceiveBuffer( void )
{
	return ( USART_RxHead != USART_RxTail ); /* Return 0 (FALSE) if the receive buffer is empty */
 770:	20 91 d9 03 	lds	r18, 0x03D9
 774:	90 91 d8 03 	lds	r25, 0x03D8
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	29 13       	cpse	r18, r25
 77c:	01 c0       	rjmp	.+2      	; 0x780 <_Z19DataInReceiveBufferv+0x10>
 77e:	80 e0       	ldi	r24, 0x00	; 0
}
 780:	08 95       	ret

00000782 <__tablejump2__>:
 782:	ee 0f       	add	r30, r30
 784:	ff 1f       	adc	r31, r31
 786:	05 90       	lpm	r0, Z+
 788:	f4 91       	lpm	r31, Z
 78a:	e0 2d       	mov	r30, r0
 78c:	09 94       	ijmp

0000078e <atoi>:
 78e:	fc 01       	movw	r30, r24
 790:	88 27       	eor	r24, r24
 792:	99 27       	eor	r25, r25
 794:	e8 94       	clt
 796:	21 91       	ld	r18, Z+
 798:	20 32       	cpi	r18, 0x20	; 32
 79a:	e9 f3       	breq	.-6      	; 0x796 <atoi+0x8>
 79c:	29 30       	cpi	r18, 0x09	; 9
 79e:	10 f0       	brcs	.+4      	; 0x7a4 <atoi+0x16>
 7a0:	2e 30       	cpi	r18, 0x0E	; 14
 7a2:	c8 f3       	brcs	.-14     	; 0x796 <atoi+0x8>
 7a4:	2b 32       	cpi	r18, 0x2B	; 43
 7a6:	41 f0       	breq	.+16     	; 0x7b8 <atoi+0x2a>
 7a8:	2d 32       	cpi	r18, 0x2D	; 45
 7aa:	39 f4       	brne	.+14     	; 0x7ba <atoi+0x2c>
 7ac:	68 94       	set
 7ae:	04 c0       	rjmp	.+8      	; 0x7b8 <atoi+0x2a>
 7b0:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__mulhi_const_10>
 7b4:	82 0f       	add	r24, r18
 7b6:	91 1d       	adc	r25, r1
 7b8:	21 91       	ld	r18, Z+
 7ba:	20 53       	subi	r18, 0x30	; 48
 7bc:	2a 30       	cpi	r18, 0x0A	; 10
 7be:	c0 f3       	brcs	.-16     	; 0x7b0 <atoi+0x22>
 7c0:	1e f4       	brtc	.+6      	; 0x7c8 <atoi+0x3a>
 7c2:	90 95       	com	r25
 7c4:	81 95       	neg	r24
 7c6:	9f 4f       	sbci	r25, 0xFF	; 255
 7c8:	08 95       	ret

000007ca <__mulhi_const_10>:
 7ca:	7a e0       	ldi	r23, 0x0A	; 10
 7cc:	97 9f       	mul	r25, r23
 7ce:	90 2d       	mov	r25, r0
 7d0:	87 9f       	mul	r24, r23
 7d2:	80 2d       	mov	r24, r0
 7d4:	91 0d       	add	r25, r1
 7d6:	11 24       	eor	r1, r1
 7d8:	08 95       	ret

000007da <eeprom_read_block>:
 7da:	dc 01       	movw	r26, r24
 7dc:	cb 01       	movw	r24, r22

000007de <eeprom_read_blraw>:
 7de:	fc 01       	movw	r30, r24
 7e0:	f9 99       	sbic	0x1f, 1	; 31
 7e2:	fe cf       	rjmp	.-4      	; 0x7e0 <eeprom_read_blraw+0x2>
 7e4:	06 c0       	rjmp	.+12     	; 0x7f2 <eeprom_read_blraw+0x14>
 7e6:	f2 bd       	out	0x22, r31	; 34
 7e8:	e1 bd       	out	0x21, r30	; 33
 7ea:	f8 9a       	sbi	0x1f, 0	; 31
 7ec:	31 96       	adiw	r30, 0x01	; 1
 7ee:	00 b4       	in	r0, 0x20	; 32
 7f0:	0d 92       	st	X+, r0
 7f2:	41 50       	subi	r20, 0x01	; 1
 7f4:	50 40       	sbci	r21, 0x00	; 0
 7f6:	b8 f7       	brcc	.-18     	; 0x7e6 <eeprom_read_blraw+0x8>
 7f8:	08 95       	ret

000007fa <_exit>:
 7fa:	f8 94       	cli

000007fc <__stop_program>:
 7fc:	ff cf       	rjmp	.-2      	; 0x7fc <__stop_program>
